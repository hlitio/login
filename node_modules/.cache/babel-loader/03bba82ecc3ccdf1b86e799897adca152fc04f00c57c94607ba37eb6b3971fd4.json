{"ast":null,"code":"import { isReference, isField, DeepMerger, resultKeyNameFromField, shouldInclude, isNonNullObject, compact } from \"../../utilities/index.js\";\nexport var hasOwn = Object.prototype.hasOwnProperty;\nexport function defaultDataIdFromObject(_a, context) {\n  var __typename = _a.__typename,\n    id = _a.id,\n    _id = _a._id;\n  if (typeof __typename === \"string\") {\n    if (context) {\n      context.keyObject = id !== void 0 ? {\n        id: id\n      } : _id !== void 0 ? {\n        _id: _id\n      } : void 0;\n    }\n    if (id === void 0) id = _id;\n    if (id !== void 0) {\n      return __typename + \":\" + (typeof id === \"number\" || typeof id === \"string\" ? id : JSON.stringify(id));\n    }\n  }\n}\nvar defaultConfig = {\n  dataIdFromObject: defaultDataIdFromObject,\n  addTypename: true,\n  resultCaching: true,\n  canonizeResults: false\n};\nexport function normalizeConfig(config) {\n  return compact(defaultConfig, config);\n}\nexport function shouldCanonizeResults(config) {\n  var value = config.canonizeResults;\n  return value === void 0 ? defaultConfig.canonizeResults : value;\n}\nexport function getTypenameFromStoreObject(store, objectOrReference) {\n  return isReference(objectOrReference) ? store.get(objectOrReference.__ref, \"__typename\") : objectOrReference && objectOrReference.__typename;\n}\nexport var TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\nexport function fieldNameFromStoreName(storeFieldName) {\n  var match = storeFieldName.match(TypeOrFieldNameRegExp);\n  return match ? match[0] : storeFieldName;\n}\nexport function selectionSetMatchesResult(selectionSet, result, variables) {\n  if (isNonNullObject(result)) {\n    return Array.isArray(result) ? result.every(function (item) {\n      return selectionSetMatchesResult(selectionSet, item, variables);\n    }) : selectionSet.selections.every(function (field) {\n      if (isField(field) && shouldInclude(field, variables)) {\n        var key = resultKeyNameFromField(field);\n        return hasOwn.call(result, key) && (!field.selectionSet || selectionSetMatchesResult(field.selectionSet, result[key], variables));\n      }\n      return true;\n    });\n  }\n  return false;\n}\nexport function storeValueIsStoreObject(value) {\n  return isNonNullObject(value) && !isReference(value) && !Array.isArray(value);\n}\nexport function makeProcessedFieldsMerger() {\n  return new DeepMerger();\n}","map":{"version":3,"mappings":"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","names":["isReference","isField","DeepMerger","resultKeyNameFromField","shouldInclude","isNonNullObject","compact","hasOwn","Object","prototype","defaultDataIdFromObject","_a","context","__typename","id","_id","keyObject","JSON","stringify","defaultConfig","dataIdFromObject","addTypename","resultCaching","canonizeResults","normalizeConfig","config","shouldCanonizeResults","value","getTypenameFromStoreObject","store","objectOrReference","get","__ref","TypeOrFieldNameRegExp","fieldNameFromStoreName","storeFieldName","match","selectionSetMatchesResult","selectionSet","result","variables","Array","isArray","every","item","selections","field","key","call","storeValueIsStoreObject","makeProcessedFieldsMerger"],"sources":["C:\\Users\\Hernan\\Desktop\\Proyectos\\login\\node_modules\\@apollo\\src\\cache\\inmemory\\helpers.ts"],"sourcesContent":["import { SelectionSetNode } from 'graphql';\n\nimport {\n  NormalizedCache,\n  InMemoryCacheConfig,\n} from './types';\n\nimport { KeyFieldsContext } from './policies';\n\nimport {\n  Reference,\n  isReference,\n  StoreValue,\n  StoreObject,\n  isField,\n  DeepMerger,\n  resultKeyNameFromField,\n  shouldInclude,\n  isNonNullObject,\n  compact,\n} from '../../utilities';\n\nexport const {\n  hasOwnProperty: hasOwn,\n} = Object.prototype;\n\nexport function defaultDataIdFromObject(\n  { __typename, id, _id }: Readonly<StoreObject>,\n  context?: KeyFieldsContext,\n): string | undefined {\n  if (typeof __typename === \"string\") {\n    if (context) {\n      context.keyObject =\n         id !== void 0 ? {  id } :\n        _id !== void 0 ? { _id } :\n        void 0;\n    }\n    // If there is no object.id, fall back to object._id.\n    if (id === void 0) id = _id;\n    if (id !== void 0) {\n      return `${__typename}:${(\n        typeof id === \"number\" ||\n        typeof id === \"string\"\n      ) ? id : JSON.stringify(id)}`;\n    }\n  }\n}\n\nconst defaultConfig = {\n  dataIdFromObject: defaultDataIdFromObject,\n  addTypename: true,\n  resultCaching: true,\n  // Thanks to the shouldCanonizeResults helper, this should be the only line\n  // you have to change to reenable canonization by default in the future.\n  canonizeResults: false,\n};\n\nexport function normalizeConfig(config: InMemoryCacheConfig) {\n  return compact(defaultConfig, config);\n}\n\nexport function shouldCanonizeResults(\n  config: Pick<InMemoryCacheConfig, \"canonizeResults\">,\n): boolean {\n  const value = config.canonizeResults;\n  return value === void 0 ? defaultConfig.canonizeResults : value;\n}\n\nexport function getTypenameFromStoreObject(\n  store: NormalizedCache,\n  objectOrReference: StoreObject | Reference,\n): string | undefined {\n  return isReference(objectOrReference)\n    ? store.get(objectOrReference.__ref, \"__typename\") as string\n    : objectOrReference && objectOrReference.__typename;\n}\n\nexport const TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;\n\nexport function fieldNameFromStoreName(storeFieldName: string): string {\n  const match = storeFieldName.match(TypeOrFieldNameRegExp);\n  return match ? match[0] : storeFieldName;\n}\n\nexport function selectionSetMatchesResult(\n  selectionSet: SelectionSetNode,\n  result: Record<string, any>,\n  variables?: Record<string, any>,\n): boolean {\n  if (isNonNullObject(result)) {\n    return Array.isArray(result)\n      ? result.every(item => selectionSetMatchesResult(selectionSet, item, variables))\n      : selectionSet.selections.every(field => {\n        if (isField(field) && shouldInclude(field, variables)) {\n          const key = resultKeyNameFromField(field);\n          return hasOwn.call(result, key) &&\n            (!field.selectionSet ||\n             selectionSetMatchesResult(field.selectionSet, result[key], variables));\n        }\n        // If the selection has been skipped with @skip(true) or\n        // @include(false), it should not count against the matching. If\n        // the selection is not a field, it must be a fragment (inline or\n        // named). We will determine if selectionSetMatchesResult for that\n        // fragment when we get to it, so for now we return true.\n        return true;\n      });\n  }\n  return false;\n}\n\nexport function storeValueIsStoreObject(\n  value: StoreValue,\n): value is StoreObject {\n  return isNonNullObject(value) &&\n    !isReference(value) &&\n    !Array.isArray(value);\n}\n\nexport function makeProcessedFieldsMerger() {\n  return new DeepMerger;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}