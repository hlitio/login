{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport { invariant, InvariantError } from \"../globals/index.js\";\nexport function getFragmentQueryDocument(document, fragmentName) {\n  var actualFragmentName = fragmentName;\n  var fragments = [];\n  document.definitions.forEach(function (definition) {\n    if (definition.kind === 'OperationDefinition') {\n      throw __DEV__ ? new InvariantError(\"Found a \" + definition.operation + \" operation\" + (definition.name ? \" named '\" + definition.name.value + \"'\" : '') + \". \" + 'No operations are allowed when using a fragment as a query. Only fragments are allowed.') : new InvariantError(43);\n    }\n    if (definition.kind === 'FragmentDefinition') {\n      fragments.push(definition);\n    }\n  });\n  if (typeof actualFragmentName === 'undefined') {\n    __DEV__ ? invariant(fragments.length === 1, \"Found \" + fragments.length + \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\") : invariant(fragments.length === 1, 44);\n    actualFragmentName = fragments[0].name.value;\n  }\n  var query = __assign(__assign({}, document), {\n    definitions: __spreadArray([{\n      kind: 'OperationDefinition',\n      operation: 'query',\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [{\n          kind: 'FragmentSpread',\n          name: {\n            kind: 'Name',\n            value: actualFragmentName\n          }\n        }]\n      }\n    }], document.definitions, true)\n  });\n  return query;\n}\nexport function createFragmentMap(fragments) {\n  if (fragments === void 0) {\n    fragments = [];\n  }\n  var symTable = {};\n  fragments.forEach(function (fragment) {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\nexport function getFragmentFromSelection(selection, fragmentMap) {\n  switch (selection.kind) {\n    case 'InlineFragment':\n      return selection;\n    case 'FragmentSpread':\n      {\n        var fragment = fragmentMap && fragmentMap[selection.name.value];\n        __DEV__ ? invariant(fragment, \"No fragment named \" + selection.name.value + \".\") : invariant(fragment, 45);\n        return fragment;\n      }\n    default:\n      return null;\n  }\n}","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,qBAAa;AA+BvD,OAAM,SAAUC,wBAAwB,CACtCC,QAAsB,EACtBC,YAAqB;EAErB,IAAIC,kBAAkB,GAAGD,YAAY;EAKrC,IAAME,SAAS,GAAkC,EAAE;EACnDH,QAAQ,CAACI,WAAW,CAACC,OAAO,CAAC,oBAAU;IAGrC,IAAIC,UAAU,CAACC,IAAI,KAAK,qBAAqB,EAAE;MAC7C,MAAMC,OAAI,qBACR,WAAW,GAAUF,UAAU,yBAC7B,IAAUA,UAAQ,kBAAW,GAAUA,UAAM,CAAKG,UAAM,GAAE,MACxD,aACF,yFAAyF,CAC5F,GAAC;;IAIJ,IAAIH,UAAU,CAACC,IAAI,KAAK,oBAAoB,EAAE;MAC5CJ,SAAS,CAACO,IAAI,CAACJ,UAAU,CAAC;;EAE9B,CAAC,CAAC;EAIF,IAAI,OAAOJ,kBAAkB,KAAK,WAAW,EAAE;IAC7CM,UACEX,SAAS,CAACM,SAAM,OAChB,gBACE,GAAUA,SAAM,6FAElB;IACFD,kBAAkB,GAAGC,SAAS,CAAC,CAAC,CAAC,CAACM,IAAI,CAACE,KAAK;;EAK9C,IAAMC,KAAK,yBACNZ,QAAQ;IACXI,WAAW,iBACT;MACEG,IAAI,EAAE,qBAAqB;MAC3BM,SAAS,EAAE,OAAO;MAClBC,YAAY,EAAE;QACZP,IAAI,EAAE,cAAc;QACpBQ,UAAU,EAAE,CACV;UACER,IAAI,EAAE,gBAAgB;UACtBE,IAAI,EAAE;YACJF,IAAI,EAAE,MAAM;YACZI,KAAK,EAAET;;SAEV;;KAGN,GACEF,QAAQ,CAACI,WAAW;EAAA,EAE1B;EAED,OAAOQ,KAAK;AACd;AAWA,OAAM,SAAUI,iBAAiB,CAC/Bb,SAAwC;EAAxC;IAAAA,cAAwC;EAAA;EAExC,IAAMc,QAAQ,GAAgB,EAAE;EAChCd,SAAS,CAACE,OAAO,CAAC,kBAAQ;IACxBY,QAAQ,CAACC,QAAQ,CAACT,IAAI,CAACE,KAAK,CAAC,GAAGO,QAAQ;EAC1C,CAAC,CAAC;EACF,OAAOD,QAAQ;AACjB;AAEA,OAAM,SAAUE,wBAAwB,CACtCC,SAAwB,EACxBC,WAAyB;EAEzB,QAAQD,SAAS,CAACb,IAAI;IACpB,KAAK,gBAAgB;MACnB,OAAOa,SAAS;IAClB,KAAK,gBAAgB;MAAE;QACrB,IAAMF,QAAQ,GAAGG,WAAW,IAAIA,WAAW,CAACD,SAAS,CAACX,IAAI,CAACE,KAAK,CAAC;QACjEH,UAAUX,SAAQ,CAAEqB,8BAAqB,GAAUE,SAAK,CAAKX,UAAK;QAClE,OAAOS,QAAS;;IAElB;MACE,OAAO,IAAI;EAAC;AAElB","names":["invariant","InvariantError","getFragmentQueryDocument","document","fragmentName","actualFragmentName","fragments","definitions","forEach","definition","kind","__DEV__","name","push","value","query","operation","selectionSet","selections","createFragmentMap","symTable","fragment","getFragmentFromSelection","selection","fragmentMap"],"sources":["C:\\Users\\Hernan\\Desktop\\Proyectos\\login\\node_modules\\@apollo\\src\\utilities\\graphql\\fragments.ts"],"sourcesContent":["import { invariant, InvariantError } from '../globals';\n\nimport {\n  DocumentNode,\n  FragmentDefinitionNode,\n  InlineFragmentNode,\n  SelectionNode\n} from 'graphql';\n\n/**\n * Returns a query document which adds a single query operation that only\n * spreads the target fragment inside of it.\n *\n * So for example a document of:\n *\n * ```graphql\n * fragment foo on Foo { a b c }\n * ```\n *\n * Turns into:\n *\n * ```graphql\n * { ...foo }\n *\n * fragment foo on Foo { a b c }\n * ```\n *\n * The target fragment will either be the only fragment in the document, or a\n * fragment specified by the provided `fragmentName`. If there is more than one\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\n */\nexport function getFragmentQueryDocument(\n  document: DocumentNode,\n  fragmentName?: string,\n): DocumentNode {\n  let actualFragmentName = fragmentName;\n\n  // Build an array of all our fragment definitions that will be used for\n  // validations. We also do some validations on the other definitions in the\n  // document while building this list.\n  const fragments: Array<FragmentDefinitionNode> = [];\n  document.definitions.forEach(definition => {\n    // Throw an error if we encounter an operation definition because we will\n    // define our own operation definition later on.\n    if (definition.kind === 'OperationDefinition') {\n      throw new InvariantError(\n        `Found a ${definition.operation} operation${\n          definition.name ? ` named '${definition.name.value}'` : ''\n        }. ` +\n          'No operations are allowed when using a fragment as a query. Only fragments are allowed.',\n      );\n    }\n    // Add our definition to the fragments array if it is a fragment\n    // definition.\n    if (definition.kind === 'FragmentDefinition') {\n      fragments.push(definition);\n    }\n  });\n\n  // If the user did not give us a fragment name then let us try to get a\n  // name from a single fragment in the definition.\n  if (typeof actualFragmentName === 'undefined') {\n    invariant(\n      fragments.length === 1,\n      `Found ${\n        fragments.length\n      } fragments. \\`fragmentName\\` must be provided when there is not exactly 1 fragment.`,\n    );\n    actualFragmentName = fragments[0].name.value;\n  }\n\n  // Generate a query document with an operation that simply spreads the\n  // fragment inside of it.\n  const query: DocumentNode = {\n    ...document,\n    definitions: [\n      {\n        kind: 'OperationDefinition',\n        operation: 'query',\n        selectionSet: {\n          kind: 'SelectionSet',\n          selections: [\n            {\n              kind: 'FragmentSpread',\n              name: {\n                kind: 'Name',\n                value: actualFragmentName,\n              },\n            },\n          ],\n        },\n      },\n      ...document.definitions,\n    ],\n  };\n\n  return query;\n}\n\n/**\n * This is an interface that describes a map from fragment names to fragment definitions.\n */\nexport interface FragmentMap {\n  [fragmentName: string]: FragmentDefinitionNode;\n}\n\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nexport function createFragmentMap(\n  fragments: FragmentDefinitionNode[] = [],\n): FragmentMap {\n  const symTable: FragmentMap = {};\n  fragments.forEach(fragment => {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\n\nexport function getFragmentFromSelection(\n  selection: SelectionNode,\n  fragmentMap?: FragmentMap,\n): InlineFragmentNode | FragmentDefinitionNode | null {\n  switch (selection.kind) {\n    case 'InlineFragment':\n      return selection;\n    case 'FragmentSpread': {\n      const fragment = fragmentMap && fragmentMap[selection.name.value];\n      invariant(fragment, `No fragment named ${selection.name.value}.`);\n      return fragment!;\n    }\n    default:\n      return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}