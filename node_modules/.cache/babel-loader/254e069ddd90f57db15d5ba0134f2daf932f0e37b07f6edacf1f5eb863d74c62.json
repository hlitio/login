{"ast":null,"code":"import { __assign } from \"tslib\";\nimport \"../../../utilities/globals/index.js\";\nimport { useContext, useEffect, useReducer, useRef } from 'react';\nimport { QueryData } from \"../../data/index.js\";\nimport { useDeepMemo } from \"./useDeepMemo.js\";\nimport { getApolloContext } from \"../../context/index.js\";\nimport { useAfterFastRefresh } from \"./useAfterFastRefresh.js\";\nexport function useBaseQuery(query, options, lazy) {\n  if (lazy === void 0) {\n    lazy = false;\n  }\n  var context = useContext(getApolloContext());\n  var _a = useReducer(function (x) {\n      return x + 1;\n    }, 0),\n    tick = _a[0],\n    forceUpdate = _a[1];\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    query: query\n  }) : {\n    query: query\n  };\n  var queryDataRef = useRef();\n  var queryData = queryDataRef.current || (queryDataRef.current = new QueryData({\n    options: updatedOptions,\n    context: context,\n    onNewData: function () {\n      if (!queryData.ssrInitiated()) {\n        Promise.resolve().then(function () {\n          return queryDataRef.current && queryDataRef.current.isMounted && forceUpdate();\n        });\n      } else {\n        forceUpdate();\n      }\n    }\n  }));\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n  var memo = {\n    options: __assign(__assign({}, updatedOptions), {\n      onError: void 0,\n      onCompleted: void 0\n    }),\n    context: context,\n    tick: tick\n  };\n  var result = useDeepMemo(function () {\n    return lazy ? queryData.executeLazy() : queryData.execute();\n  }, memo);\n  var queryResult = lazy ? result[1] : result;\n  if (__DEV__) {\n    useAfterFastRefresh(forceUpdate);\n  }\n  useEffect(function () {\n    return function () {\n      queryData.cleanup();\n      queryDataRef.current = void 0;\n    };\n  }, []);\n  useEffect(function () {\n    return queryData.afterExecute({\n      lazy: lazy\n    });\n  }, [queryResult.loading, queryResult.networkStatus, queryResult.error, queryResult.data, queryData.currentObservable]);\n  return result;\n}","map":{"version":3,"mappings":";AAAA,OAAO,qCAA6B;AAEpC,SAASA,UAAU,EAAEC,SAAS,EAAEC,UAAU,EAAEC,MAAM,QAAQ,OAAO;AAUjE,SAASC,SAAS,QAAQ,qBAAa;AACvC,SAASC,WAAW,QAAQ,kBAAgB;AAE5C,SAASC,gBAAgB,QAAQ,wBAAgB;AACjD,SAASC,mBAAmB,QAAQ,0BAAwB;AAE5D,OAAM,SAAUC,YAAY,CAC1BC,KAA0D,EAC1DC,OAA6C,EAC7CC,IAAY;EAAZ;IAAAA,YAAY;EAAA;EAEZ,IAAMC,OAAO,GAAGZ,UAAU,CAACM,gBAAgB,EAAE,CAAC;EACxC,SAAsBJ,UAAU,CAAC,WAAC;MAAI,QAAC,GAAG,CAAC;IAAL,CAAK,EAAE,CAAC,CAAC;IAA9CW,IAAI;IAAEC,WAAW,QAA6B;EACrD,IAAMC,cAAc,GAAGL,OAAO,GAAEM,sBAAMN,OAAO;IAAED,KAAK;EAAA,KAAK;IAAEA,KAAK;EAAA,CAAE;EAElE,IAAMQ,YAAY,GAAGd,MAAM,EAAgC;EAC3D,IAAMe,SAAS,GAAGD,YAAY,CAACE,OAAO,KACpCF,YAAY,CAACE,OAAO,GAAG,IAAIf,SAAS,CAAoB;IACtDM,OAAO,EAAEK,cAAqD;IAC9DH,OAAO;IACPQ,SAAS;MACP,IAAI,CAACF,SAAS,CAACG,YAAY,EAAE,EAAE;QAO7BC,OAAO,CAACC,OAAO,EAAE,CAACC,IAAI,CAAC;UAAM,mBAAY,CAACL,OAAO,IAAIF,YAAY,CAACE,OAAO,CAACM,SAAS,IAAIX,WAAW,EAAE;QAAvE,CAAuE,CAAC;OACtG,MAAM;QAGLA,WAAW,EAAE;;IAEjB;GACD,CAAC,CACH;EAEDI,SAAS,CAACQ,UAAU,CAACX,cAAc,CAAC;EACpCG,SAAS,CAACN,OAAO,GAAGA,OAAO;EAK3B,IAAMe,IAAI,GAAG;IACXjB,OAAO,EAAEM,sBACJD,cAAc;MACjBa,OAAO,EAAE,KAAK,CAAC;MACfC,WAAW,EAAE,KAAK;IAAC,EACmB;IACxCjB,OAAO;IACPC,IAAI;GACL;EAED,IAAMiB,MAAM,GAAGzB,WAAW,CACxB;IAAM,OAACM,IAAI,GAAGO,SAAS,CAACa,WAAW,EAAE,GAAGb,SAAS,CAACc,OAAO,EAAE;EAArD,CAAsD,EAC5DL,IAAI,CACL;EAED,IAAMM,WAAW,GAAGtB,IAAI,GACnBmB,MAAwC,CAAC,CAAC,CAAC,GAC3CA,MAAyC;EAE9C,IAAII,OAAO,EAAE;IAEX3B,mBAAmB,CAACO,WAAW,CAAC;;EAGlCb,SAAS,CAAC;IACR,OAAO;MACLiB,SAAS,CAACiB,OAAO,EAAE;MAGnBlB,YAAY,CAACE,OAAO,GAAG,KAAK,CAAC;IAC/B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAENlB,SAAS,CAAC;IAAM,gBAAS,CAACmC,YAAY,CAAC;MAAEzB,IAAI;IAAA,CAAE,CAAC;EAAhC,CAAgC,EAAE,CAChDsB,WAAW,CAACI,OAAO,EACnBJ,WAAW,CAACK,aAAa,EACzBL,WAAW,CAACM,KAAK,EACjBN,WAAW,CAACO,IAAI,EAChBtB,SAAS,CAACuB,iBAAiB,CAC5B,CAAC;EAEF,OAAOX,MAAM;AACf","names":["useContext","useEffect","useReducer","useRef","QueryData","useDeepMemo","getApolloContext","useAfterFastRefresh","useBaseQuery","query","options","lazy","context","tick","forceUpdate","updatedOptions","__assign","queryDataRef","queryData","current","onNewData","ssrInitiated","Promise","resolve","then","isMounted","setOptions","memo","onError","onCompleted","result","executeLazy","execute","queryResult","__DEV__","cleanup","afterExecute","loading","networkStatus","error","data","currentObservable"],"sources":["C:\\Users\\Hernan\\Desktop\\Proyectos\\login\\node_modules\\@apollo\\src\\react\\hooks\\utils\\useBaseQuery.ts"],"sourcesContent":["import '../../../utilities/globals';\n\nimport { useContext, useEffect, useReducer, useRef } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport {\n  QueryHookOptions,\n  QueryDataOptions,\n  QueryTuple,\n  QueryResult,\n} from '../../types/types';\nimport { QueryData } from '../../data';\nimport { useDeepMemo } from './useDeepMemo';\nimport { OperationVariables } from '../../../core';\nimport { getApolloContext } from '../../context';\nimport { useAfterFastRefresh } from './useAfterFastRefresh';\n\nexport function useBaseQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>,\n  lazy = false\n) {\n  const context = useContext(getApolloContext());\n  const [tick, forceUpdate] = useReducer(x => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  const queryData = queryDataRef.current || (\n    queryDataRef.current = new QueryData<TData, TVariables>({\n      options: updatedOptions as QueryDataOptions<TData, TVariables>,\n      context,\n      onNewData() {\n        if (!queryData.ssrInitiated()) {\n          // When new data is received from the `QueryData` object, we want to\n          // force a re-render to make sure the new data is displayed. We can't\n          // force that re-render if we're already rendering however so to be\n          // safe we'll trigger the re-render in a microtask. In case the\n          // component gets unmounted before this callback fires, we re-check\n          // queryDataRef.current.isMounted before calling forceUpdate().\n          Promise.resolve().then(() => queryDataRef.current && queryDataRef.current.isMounted && forceUpdate());\n        } else {\n          // If we're rendering on the server side we can force an update at\n          // any point.\n          forceUpdate();\n        }\n      }\n    })\n  );\n\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  // `onError` and `onCompleted` callback functions will not always have a\n  // stable identity, so we'll exclude them from the memoization key to\n  // prevent `afterExecute` from being triggered un-necessarily.\n  const memo = {\n    options: {\n      ...updatedOptions,\n      onError: void 0,\n      onCompleted: void 0\n    } as QueryHookOptions<TData, TVariables>,\n    context,\n    tick\n  };\n\n  const result = useDeepMemo(\n    () => (lazy ? queryData.executeLazy() : queryData.execute()),\n    memo\n  );\n\n  const queryResult = lazy\n    ? (result as QueryTuple<TData, TVariables>)[1]\n    : (result as QueryResult<TData, TVariables>);\n\n  if (__DEV__) {\n    // ensure we run an update after refreshing so that we reinitialize\n    useAfterFastRefresh(forceUpdate);\n  }\n\n  useEffect(() => {\n    return () => {\n      queryData.cleanup();\n      // this effect can run multiple times during a fast-refresh\n      // so make sure we clean up the ref\n      queryDataRef.current = void 0;\n    }\n  }, []);\n\n  useEffect(() => queryData.afterExecute({ lazy }), [\n    queryResult.loading,\n    queryResult.networkStatus,\n    queryResult.error,\n    queryResult.data,\n    queryData.currentObservable,\n  ]);\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}