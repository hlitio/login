{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { OperationData } from \"./OperationData.js\";\nvar SubscriptionData = function (_super) {\n  __extends(SubscriptionData, _super);\n  function SubscriptionData(_a) {\n    var options = _a.options,\n      context = _a.context,\n      setResult = _a.setResult;\n    var _this = _super.call(this, options, context) || this;\n    _this.currentObservable = {};\n    _this.setResult = setResult;\n    _this.initialize(options);\n    return _this;\n  }\n  SubscriptionData.prototype.execute = function (result) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n    var currentResult = result;\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n    var shouldResubscribe = this.getOptions().shouldResubscribe;\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n    if (shouldResubscribe !== false && this.previousOptions && Object.keys(this.previousOptions).length > 0 && (this.previousOptions.subscription !== this.getOptions().subscription || !equal(this.previousOptions.variables, this.getOptions().variables) || this.previousOptions.skip !== this.getOptions().skip)) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n    this.initialize(this.getOptions());\n    this.startSubscription();\n    this.previousOptions = this.getOptions();\n    return __assign(__assign({}, currentResult), {\n      variables: this.getOptions().variables\n    });\n  };\n  SubscriptionData.prototype.afterExecute = function () {\n    this.isMounted = true;\n  };\n  SubscriptionData.prototype.cleanup = function () {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  };\n  SubscriptionData.prototype.initialize = function (options) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy,\n      context: options.context\n    });\n  };\n  SubscriptionData.prototype.startSubscription = function () {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query.subscribe({\n      next: this.updateCurrentData.bind(this),\n      error: this.updateError.bind(this),\n      complete: this.completeSubscription.bind(this)\n    });\n  };\n  SubscriptionData.prototype.getLoadingResult = function () {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  };\n  SubscriptionData.prototype.updateResult = function (result) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  };\n  SubscriptionData.prototype.updateCurrentData = function (result) {\n    var onSubscriptionData = this.getOptions().onSubscriptionData;\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  };\n  SubscriptionData.prototype.updateError = function (error) {\n    this.updateResult({\n      error: error,\n      loading: false\n    });\n  };\n  SubscriptionData.prototype.completeSubscription = function () {\n    var _this = this;\n    Promise.resolve().then(function () {\n      var onSubscriptionComplete = _this.getOptions().onSubscriptionComplete;\n      if (onSubscriptionComplete) onSubscriptionComplete();\n      _this.endSubscription();\n    });\n  };\n  SubscriptionData.prototype.endSubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n  return SubscriptionData;\n}(OperationData);\nexport { SubscriptionData };","map":{"version":3,"mappings":"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","names":["equal","OperationData","__extends","_a","options","context","setResult","_super","_this","initialize","SubscriptionData","result","getOptions","skip","cleanup","loading","error","undefined","data","variables","currentResult","refreshClient","isNew","getLoadingResult","shouldResubscribe","previousOptions","Object","keys","length","subscription","startSubscription","isMounted","endSubscription","currentObservable","query","client","subscribe","fetchPolicy","next","updateCurrentData","bind","updateError","complete","completeSubscription","updateResult","onSubscriptionData","subscriptionData","Promise","resolve","then","onSubscriptionComplete","unsubscribe"],"sources":["C:\\Users\\Hernan\\Desktop\\Proyectos\\login\\node_modules\\@apollo\\src\\react\\data\\SubscriptionData.ts"],"sourcesContent":["import { equal } from '@wry/equality';\n\nimport { OperationData } from './OperationData';\nimport {\n  SubscriptionCurrentObservable,\n  SubscriptionDataOptions,\n  SubscriptionResult\n} from '../types/types';\n\nexport class SubscriptionData<\n  TData = any,\n  TVariables = any\n> extends OperationData<SubscriptionDataOptions<TData, TVariables>> {\n  private setResult: any;\n  private currentObservable: SubscriptionCurrentObservable = {};\n\n  constructor({\n    options,\n    context,\n    setResult\n  }: {\n    options: SubscriptionDataOptions<TData, TVariables>;\n    context: any;\n    setResult: any;\n  }) {\n    super(options, context);\n    this.setResult = setResult;\n    this.initialize(options);\n  }\n\n  public execute(result: SubscriptionResult<TData>) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    let currentResult = result;\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    let { shouldResubscribe } = this.getOptions();\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (\n      shouldResubscribe !== false &&\n      this.previousOptions &&\n      Object.keys(this.previousOptions).length > 0 &&\n      (this.previousOptions.subscription !== this.getOptions().subscription ||\n        !equal(this.previousOptions.variables, this.getOptions().variables) ||\n        this.previousOptions.skip !== this.getOptions().skip)\n    ) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n\n    this.previousOptions = this.getOptions();\n    return { ...currentResult, variables: this.getOptions().variables };\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n  }\n\n  public cleanup() {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  }\n\n  private initialize(options: SubscriptionDataOptions<TData, TVariables>) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy,\n      context: options.context,\n    });\n  }\n\n  private startSubscription() {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query!.subscribe(\n      {\n        next: this.updateCurrentData.bind(this),\n        error: this.updateError.bind(this),\n        complete: this.completeSubscription.bind(this)\n      }\n    );\n  }\n\n  private getLoadingResult() {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    } as SubscriptionResult<TData>;\n  }\n\n  private updateResult(result: SubscriptionResult) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  }\n\n  private updateCurrentData(result: SubscriptionResult<TData>) {\n    const { onSubscriptionData } = this.getOptions();\n\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  }\n\n  private updateError(error: any) {\n    this.updateResult({\n      error,\n      loading: false\n    });\n  }\n\n  private completeSubscription() {\n    // We have to defer this endSubscription call, because otherwise multiple\n    // subscriptions for the same component will cause infinite rendering.\n    // See https://github.com/apollographql/apollo-client/pull/7917\n    Promise.resolve().then(() => {\n      const { onSubscriptionComplete } = this.getOptions();\n      if (onSubscriptionComplete) onSubscriptionComplete();\n      this.endSubscription();\n    });\n  }\n\n  private endSubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}