{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { parser, operationName } from \"../parser/index.js\";\nvar OperationData = function () {\n  function OperationData(options, context) {\n    this.isMounted = false;\n    this.previousOptions = {};\n    this.context = {};\n    this.options = {};\n    this.options = options || {};\n    this.context = context || {};\n  }\n  OperationData.prototype.getOptions = function () {\n    return this.options;\n  };\n  OperationData.prototype.setOptions = function (newOptions, storePrevious) {\n    if (storePrevious === void 0) {\n      storePrevious = false;\n    }\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  };\n  OperationData.prototype.unmount = function () {\n    this.isMounted = false;\n  };\n  OperationData.prototype.refreshClient = function () {\n    var client = this.options && this.options.client || this.context && this.context.client;\n    __DEV__ ? invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via options.') : invariant(!!client, 29);\n    var isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client,\n      isNew: isNew\n    };\n  };\n  OperationData.prototype.verifyDocumentType = function (document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    __DEV__ ? invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" + (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\")) : invariant(operation.type === type, 30);\n  };\n  return OperationData;\n}();\nexport { OperationData };","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,QAAQ,kCAA0B;AAGpD,SAASC,KAAK,QAAQ,eAAe;AAGrC,SAAuBC,MAAM,EAAEC,aAAa,QAAQ,oBAAY;AAGhE;EAUE,uBAAYC,OAAiC,EAAEC,OAAa;IATrD,cAAS,GAAY,KAAK;IAC1B,oBAAe,GAA4B,EAEjD;IACM,YAAO,GAAQ,EAAE;IAGhB,YAAO,GAA4B,EAA6B;IAGtE,IAAI,CAACD,OAAO,GAAGA,OAAO,IAAK,EAA8B;IACzD,IAAI,CAACC,OAAO,GAAGA,OAAO,IAAI,EAAE;EAC9B;EAEOC,kCAAU,GAAjB;IACE,OAAO,IAAI,CAACF,OAAO;EACrB,CAAC;EAEME,kCAAU,GAAjB,UACEC,UAAmC,EACnCC,aAA8B;IAA9B;MAAAA,qBAA8B;IAAA;IAE9B,IAAIA,aAAa,IAAI,CAACP,KAAK,CAAC,IAAI,CAACG,OAAO,EAAEG,UAAU,CAAC,EAAE;MACrD,IAAI,CAACE,eAAe,GAAG,IAAI,CAACL,OAAO;;IAErC,IAAI,CAACA,OAAO,GAAGG,UAAU;EAC3B,CAAC;EAMSD,+BAAO,GAAjB;IACE,IAAI,CAACI,SAAS,GAAG,KAAK;EACxB,CAAC;EAESJ,qCAAa,GAAvB;IACE,IAAMK,MAAM,GACT,IAAI,CAACP,OAAO,IAAI,IAAI,CAACA,OAAO,CAACO,MAAM,IACnC,IAAI,CAACN,OAAO,IAAI,IAAI,CAACA,OAAO,CAACM,MAAO;IAEvCC,UACEZ,SAAQ,CACR,8EAAoE,GAClE,6DAA6D,GAC7D,uCAAuC,CAC1C,GAACA;IAEF,IAAIa,KAAK,GAAG,KAAK;IACjB,IAAIF,MAAM,KAAK,IAAI,CAACA,MAAM,EAAE;MAC1BE,KAAK,GAAG,IAAI;MACZ,IAAI,CAACF,MAAM,GAAGA,MAAM;MACpB,IAAI,CAACG,OAAO,EAAE;;IAEhB,OAAO;MACLH,MAAM,EAAE,IAAI,CAACA,MAA8B;MAC3CE,KAAK;KACN;EACH,CAAC;EAESP,0CAAkB,GAA5B,UAA6BS,QAAsB,EAAEC,IAAkB;IACrE,IAAMC,SAAS,GAAGf,MAAM,CAACa,QAAQ,CAAC;IAClC,IAAMG,qBAAqB,GAAGf,aAAa,CAACa,IAAI,CAAC;IACjD,IAAMG,iBAAiB,GAAGhB,aAAa,CAACc,SAAS,CAACD,IAAI,CAAC;IACvDJ,UACEZ,SAAS,CAACiB,SAAS,KAAI,KACvBD,kBAAa,wBAAqB,yBAAsB,IACnDE,qBAAqB,gBAAWC,iBAAiB,uBAAoB,EAC3E,GAACnB;EACJ,CAAC;EACH,oBAAC;AAAD,CAAC,EAvED","names":["invariant","equal","parser","operationName","options","context","OperationData","newOptions","storePrevious","previousOptions","isMounted","client","__DEV__","isNew","cleanup","document","type","operation","requiredOperationName","usedOperationName"],"sources":["C:\\Users\\Hernan\\Desktop\\Proyectos\\login\\node_modules\\@apollo\\src\\react\\data\\OperationData.ts"],"sourcesContent":["import { invariant } from '../../utilities/globals';\n\nimport { DocumentNode } from 'graphql';\nimport { equal } from '@wry/equality';\n\nimport { ApolloClient } from '../../core';\nimport { DocumentType, parser, operationName } from '../parser';\nimport { CommonOptions } from '../types/types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = false;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: any = {};\n  public client: ApolloClient<object>;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: any) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(\n    newOptions: CommonOptions<TOptions>,\n    storePrevious: boolean = false\n  ) {\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): void | (() => void);\n  public abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}