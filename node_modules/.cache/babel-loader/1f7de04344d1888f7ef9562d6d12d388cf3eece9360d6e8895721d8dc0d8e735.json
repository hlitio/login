{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport \"../../utilities/globals/index.js\";\nimport { visit } from 'graphql';\nimport { ApolloLink } from \"../core/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { serializeFetchParameter } from \"./serializeFetchParameter.js\";\nimport { selectURI } from \"./selectURI.js\";\nimport { parseAndCheckHttpResponse } from \"./parseAndCheckHttpResponse.js\";\nimport { checkFetcher } from \"./checkFetcher.js\";\nimport { selectHttpOptionsAndBody, fallbackHttpConfig } from \"./selectHttpOptionsAndBody.js\";\nimport { createSignalIfSupported } from \"./createSignalIfSupported.js\";\nimport { rewriteURIForGET } from \"./rewriteURIForGET.js\";\nimport { fromError } from \"../utils/index.js\";\nimport { maybe } from \"../../utilities/index.js\";\nvar backupFetch = maybe(function () {\n  return fetch;\n});\nexport var createHttpLink = function (linkOptions) {\n  if (linkOptions === void 0) {\n    linkOptions = {};\n  }\n  var _a = linkOptions.uri,\n    uri = _a === void 0 ? '/graphql' : _a,\n    preferredFetch = linkOptions.fetch,\n    includeExtensions = linkOptions.includeExtensions,\n    useGETForQueries = linkOptions.useGETForQueries,\n    _b = linkOptions.includeUnusedVariables,\n    includeUnusedVariables = _b === void 0 ? false : _b,\n    requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"includeExtensions\", \"useGETForQueries\", \"includeUnusedVariables\"]);\n  if (__DEV__) {\n    checkFetcher(preferredFetch || backupFetch);\n  }\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions\n    },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers\n  };\n  return new ApolloLink(function (operation) {\n    var chosenURI = selectURI(operation, uri);\n    var context = operation.getContext();\n    var clientAwarenessHeaders = {};\n    if (context.clientAwareness) {\n      var _a = context.clientAwareness,\n        name_1 = _a.name,\n        version = _a.version;\n      if (name_1) {\n        clientAwarenessHeaders['apollographql-client-name'] = name_1;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n    var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context.headers);\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders\n    };\n    var _b = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig),\n      options = _b.options,\n      body = _b.body;\n    if (body.variables && !includeUnusedVariables) {\n      var unusedNames_1 = new Set(Object.keys(body.variables));\n      visit(operation.query, {\n        Variable: function (node, _key, parent) {\n          if (parent && parent.kind !== 'VariableDefinition') {\n            unusedNames_1.delete(node.name.value);\n          }\n        }\n      });\n      if (unusedNames_1.size) {\n        body.variables = __assign({}, body.variables);\n        unusedNames_1.forEach(function (name) {\n          delete body.variables[name];\n        });\n      }\n    }\n    var controller;\n    if (!options.signal) {\n      var _c = createSignalIfSupported(),\n        _controller = _c.controller,\n        signal = _c.signal;\n      controller = _controller;\n      if (controller) options.signal = signal;\n    }\n    var definitionIsMutation = function (d) {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n      options.method = 'GET';\n    }\n    if (options.method === 'GET') {\n      var _d = rewriteURIForGET(chosenURI, body),\n        newURI = _d.newURI,\n        parseError = _d.parseError;\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        options.body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n    return new Observable(function (observer) {\n      var currentFetch = preferredFetch || maybe(function () {\n        return fetch;\n      }) || backupFetch;\n      currentFetch(chosenURI, options).then(function (response) {\n        operation.setContext({\n          response: response\n        });\n        return response;\n      }).then(parseAndCheckHttpResponse(operation)).then(function (result) {\n        observer.next(result);\n        observer.complete();\n        return result;\n      }).catch(function (err) {\n        if (err.name === 'AbortError') return;\n        if (err.result && err.result.errors && err.result.data) {\n          observer.next(err.result);\n        }\n        observer.error(err);\n      });\n      return function () {\n        if (controller) controller.abort();\n      };\n    });\n  });\n};","map":{"version":3,"mappings":"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","names":["visit","ApolloLink","Observable","serializeFetchParameter","selectURI","parseAndCheckHttpResponse","checkFetcher","selectHttpOptionsAndBody","fallbackHttpConfig","createSignalIfSupported","rewriteURIForGET","fromError","maybe","backupFetch","createHttpLink","linkOptions","uri","preferredFetch","includeExtensions","useGETForQueries","_b","includeUnusedVariables","requestOptions","__DEV__","linkConfig","http","options","fetchOptions","credentials","headers","chosenURI","operation","context","getContext","clientAwarenessHeaders","clientAwareness","name_1","version","contextHeaders","contextConfig","body","variables","unusedNames_1","Set","Object","keys","query","Variable","node","_key","parent","kind","delete","name","value","size","forEach","controller","signal","_controller","definitionIsMutation","d","definitions","some","method","newURI","parseError","currentFetch","then","setContext","response","observer","next","result","complete","catch","err","errors","data","error","abort"],"sources":["C:\\Users\\Hernan\\Desktop\\Proyectos\\login\\node_modules\\@apollo\\src\\link\\http\\createHttpLink.ts"],"sourcesContent":["import '../../utilities/globals';\n\nimport { visit, DefinitionNode, VariableDefinitionNode } from 'graphql';\n\nimport { ApolloLink } from '../core';\nimport { Observable } from '../../utilities';\nimport { serializeFetchParameter } from './serializeFetchParameter';\nimport { selectURI } from './selectURI';\nimport { parseAndCheckHttpResponse } from './parseAndCheckHttpResponse';\nimport { checkFetcher } from './checkFetcher';\nimport {\n  selectHttpOptionsAndBody,\n  fallbackHttpConfig,\n  HttpOptions\n} from './selectHttpOptionsAndBody';\nimport { createSignalIfSupported } from './createSignalIfSupported';\nimport { rewriteURIForGET } from './rewriteURIForGET';\nimport { fromError } from '../utils';\nimport { maybe } from '../../utilities';\n\nconst backupFetch = maybe(() => fetch);\n\nexport const createHttpLink = (linkOptions: HttpOptions = {}) => {\n  let {\n    uri = '/graphql',\n    // use default global fetch if nothing passed in\n    fetch: preferredFetch,\n    includeExtensions,\n    useGETForQueries,\n    includeUnusedVariables = false,\n    ...requestOptions\n  } = linkOptions;\n\n  if (__DEV__) {\n    // Make sure at least one of preferredFetch, window.fetch, or backupFetch is\n    // defined, so requests won't fail at runtime.\n    checkFetcher(preferredFetch || backupFetch);\n  }\n\n  const linkConfig = {\n    http: { includeExtensions },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers,\n  };\n\n  return new ApolloLink(operation => {\n    let chosenURI = selectURI(operation, uri);\n\n    const context = operation.getContext();\n\n    // `apollographql-client-*` headers are automatically set if a\n    // `clientAwareness` object is found in the context. These headers are\n    // set first, followed by the rest of the headers pulled from\n    // `context.headers`. If desired, `apollographql-client-*` headers set by\n    // the `clientAwareness` object can be overridden by\n    // `apollographql-client-*` headers set in `context.headers`.\n    const clientAwarenessHeaders: {\n      'apollographql-client-name'?: string;\n      'apollographql-client-version'?: string;\n    } = {};\n\n    if (context.clientAwareness) {\n      const { name, version } = context.clientAwareness;\n      if (name) {\n        clientAwarenessHeaders['apollographql-client-name'] = name;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n\n    const contextHeaders = { ...clientAwarenessHeaders, ...context.headers };\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders,\n    };\n\n    //uses fallback, link, and then context to build options\n    const { options, body } = selectHttpOptionsAndBody(\n      operation,\n      fallbackHttpConfig,\n      linkConfig,\n      contextConfig,\n    );\n\n    if (body.variables && !includeUnusedVariables) {\n      const unusedNames = new Set(Object.keys(body.variables));\n      visit(operation.query, {\n        Variable(node, _key, parent) {\n          // A variable type definition at the top level of a query is not\n          // enough to silence server-side errors about the variable being\n          // unused, so variable definitions do not count as usage.\n          // https://spec.graphql.org/draft/#sec-All-Variables-Used\n          if (parent && (parent as VariableDefinitionNode).kind !== 'VariableDefinition') {\n            unusedNames.delete(node.name.value);\n          }\n        },\n      });\n      if (unusedNames.size) {\n        // Make a shallow copy of body.variables (with keys in the same\n        // order) and then delete unused variables from the copy.\n        body.variables = { ...body.variables };\n        unusedNames.forEach(name => {\n          delete body.variables![name];\n        });\n      }\n    }\n\n    let controller: any;\n    if (!(options as any).signal) {\n      const { controller: _controller, signal } = createSignalIfSupported();\n      controller = _controller;\n      if (controller) (options as any).signal = signal;\n    }\n\n    // If requested, set method to GET if there are no mutations.\n    const definitionIsMutation = (d: DefinitionNode) => {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    if (\n      useGETForQueries &&\n      !operation.query.definitions.some(definitionIsMutation)\n    ) {\n      options.method = 'GET';\n    }\n\n    if (options.method === 'GET') {\n      const { newURI, parseError } = rewriteURIForGET(chosenURI, body);\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        (options as any).body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n\n    return new Observable(observer => {\n      // Prefer linkOptions.fetch (preferredFetch) if provided, and otherwise\n      // fall back to the *current* global window.fetch function (see issue\n      // #7832), or (if all else fails) the backupFetch function we saved when\n      // this module was first evaluated. This last option protects against the\n      // removal of window.fetch, which is unlikely but not impossible.\n      const currentFetch = preferredFetch || maybe(() => fetch) || backupFetch;\n\n      currentFetch!(chosenURI, options)\n        .then(response => {\n          operation.setContext({ response });\n          return response;\n        })\n        .then(parseAndCheckHttpResponse(operation))\n        .then(result => {\n          // we have data and can send it to back up the link chain\n          observer.next(result);\n          observer.complete();\n          return result;\n        })\n        .catch(err => {\n          // fetch was cancelled so it's already been cleaned up in the unsubscribe\n          if (err.name === 'AbortError') return;\n          // if it is a network error, BUT there is graphql result info\n          // fire the next observer before calling error\n          // this gives apollo-client (and react-apollo) the `graphqlErrors` and `networErrors`\n          // to pass to UI\n          // this should only happen if we *also* have data as part of the response key per\n          // the spec\n          if (err.result && err.result.errors && err.result.data) {\n            // if we don't call next, the UI can only show networkError because AC didn't\n            // get any graphqlErrors\n            // this is graphql execution result info (i.e errors and possibly data)\n            // this is because there is no formal spec how errors should translate to\n            // http status codes. So an auth error (401) could have both data\n            // from a public field, errors from a private field, and a status of 401\n            // {\n            //  user { // this will have errors\n            //    firstName\n            //  }\n            //  products { // this is public so will have data\n            //    cost\n            //  }\n            // }\n            //\n            // the result of above *could* look like this:\n            // {\n            //   data: { products: [{ cost: \"$10\" }] },\n            //   errors: [{\n            //      message: 'your session has timed out',\n            //      path: []\n            //   }]\n            // }\n            // status code of above would be a 401\n            // in the UI you want to show data where you can, errors as data where you can\n            // and use correct http status codes\n            observer.next(err.result);\n          }\n          observer.error(err);\n        });\n\n      return () => {\n        // XXX support canceling this request\n        // https://developers.google.com/web/updates/2017/09/abortable-fetch\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}