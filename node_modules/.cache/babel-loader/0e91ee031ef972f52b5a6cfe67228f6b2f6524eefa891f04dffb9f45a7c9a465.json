{"ast":null,"code":"import { invariant } from \"../../utilities/globals/index.js\";\nexport var DocumentType;\n(function (DocumentType) {\n  DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n  DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n  DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache = new Map();\nexport function operationName(type) {\n  var name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\nexport function parser(document) {\n  var cached = cache.get(document);\n  if (cached) return cached;\n  var variables, type, name;\n  __DEV__ ? invariant(!!document && !!document.kind, \"Argument of \" + document + \" passed to parser was not a valid GraphQL \" + \"DocumentNode. You may need to use 'graphql-tag' or another method \" + \"to convert your operation into a document\") : invariant(!!document && !!document.kind, 34);\n  var fragments = document.definitions.filter(function (x) {\n    return x.kind === 'FragmentDefinition';\n  });\n  var queries = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'query';\n  });\n  var mutations = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'mutation';\n  });\n  var subscriptions = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'subscription';\n  });\n  __DEV__ ? invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, \"Passing only a fragment to 'graphql' is not yet supported. \" + \"You must include a query, subscription or mutation as well\") : invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, 35);\n  __DEV__ ? invariant(queries.length + mutations.length + subscriptions.length <= 1, \"react-apollo only supports a query, subscription, or a mutation per HOC. \" + (document + \" had \" + queries.length + \" queries, \" + subscriptions.length + \" \") + (\"subscriptions and \" + mutations.length + \" mutations. \") + \"You can use 'compose' to join multiple operation types to a component\") : invariant(queries.length + mutations.length + subscriptions.length <= 1, 36);\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n  var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\n  __DEV__ ? invariant(definitions.length === 1, \"react-apollo only supports one definition per HOC. \" + document + \" had \" + (definitions.length + \" definitions. \") + \"You can use 'compose' to join multiple operation types to a component\") : invariant(definitions.length === 1, 37);\n  var definition = definitions[0];\n  variables = definition.variableDefinitions || [];\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data';\n  }\n  var payload = {\n    name: name,\n    type: type,\n    variables: variables\n  };\n  cache.set(document, payload);\n  return payload;\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,QAAQ,kCAA0B;AASpD,WAAYC,YAIX;AAJD,WAAYA,YAAY;EACtBA,iDAAK;EACLA,uDAAQ;EACRA,+DAAY;AACd,CAAC,EAJWA,YAAY,KAAZA,YAAY;AAYxB,IAAMC,KAAK,GAAG,IAAIC,GAAG,EAAE;AAEvB,OAAM,SAAUC,aAAa,CAACC,IAAkB;EAC9C,IAAIC,IAAI;EACR,QAAQD,IAAI;IACV,KAAKJ,YAAY,CAACM,KAAK;MACrBD,IAAI,GAAG,OAAO;MACd;IACF,KAAKL,YAAY,CAACO,QAAQ;MACxBF,IAAI,GAAG,UAAU;MACjB;IACF,KAAKL,YAAY,CAACQ,YAAY;MAC5BH,IAAI,GAAG,cAAc;MACrB;EAAM;EAEV,OAAOA,IAAI;AACb;AAGA,OAAM,SAAUI,MAAM,CAACC,QAAsB;EAC3C,IAAMC,MAAM,GAAGV,KAAK,CAACW,GAAG,CAACF,QAAQ,CAAC;EAClC,IAAIC,MAAM,EAAE,OAAOA,MAAM;EAEzB,IAAIE,SAAS,EAAET,IAAI,EAAEC,IAAI;EAEzBS,UACEf,SAAE,CAAQ,UAAM,IAAQ,CAAC,SACzB,qBAAe,GAAQW,uDAA4C,GACjE,oEAAoE,GACpE,2CAA2C,CAC9C,GAACX;EAEF,IAAMgB,SAAS,GAAGL,QAAQ,CAACM,WAAW,CAACC,MAAM,CAC3C,UAACC,CAAiB;IAAK,QAAC,CAACC,IAAI,KAAK,oBAAoB;EAA/B,CAA+B,CACvD;EAED,IAAMC,OAAO,GAAGV,QAAQ,CAACM,WAAW,CAACC,MAAM,CACzC,UAACC,CAAiB;IAChB,QAAC,CAACC,IAAI,KAAK,qBAAqB,IAAID,CAAC,CAACG,SAAS,KAAK,OAAO;EAA3D,CAA2D,CAC9D;EAED,IAAMC,SAAS,GAAGZ,QAAQ,CAACM,WAAW,CAACC,MAAM,CAC3C,UAACC,CAAiB;IAChB,QAAC,CAACC,IAAI,KAAK,qBAAqB,IAAID,CAAC,CAACG,SAAS,KAAK,UAAU;EAA9D,CAA8D,CACjE;EAED,IAAME,aAAa,GAAGb,QAAQ,CAACM,WAAW,CAACC,MAAM,CAC/C,UAACC,CAAiB;IAChB,QAAC,CAACC,IAAI,KAAK,qBAAqB,IAAID,CAAC,CAACG,SAAS,KAAK,cAAc;EAAlE,CAAkE,CACrE;EAEDP,UACEf,SAAC,CAAS,CAACgB,SAAM,WACdK,OAAO,CAACI,MAAM,IAAIF,SAAS,CAACE,MAAM,IAAID,aAAa,CAACC,MAAO,EAC9D,6DAA6D,GAC3D,4DAA4D,CAC/D,GAACzB,+BAEFqB,OACE,OAAQ,aAAS,OAAU,IAAMG,aAAG,OAAc,EAAM;SAEnD,YAAQ,QAAQ,OAAQ,YAAM,uBAAa,OAAc,IAAM,8EAAG,IACrEb,4BAAqB,OAAU,eAAM,gBAAc,kBACnD,4DAGA,uEAA+D;EACnEN,IAAI,GAACgB,OAAQ,OAAM,GAAKpB,YAAU,MAAM;MAAE,QAAO,WAAY,CAACsB,gBAAa,EAErElB,mBAAc,aAAc;MAChCY,WAAS,oBACPI,mBACA,OAAS,GACTE,YAGFC,aAAY;SAEP,YAAY,YAAM,YAAgB,iFACrCP,yCAGE,uEAAuD;EAC7D,cAAY,cAAW;EAEvBH,SAAI,aAAe,CAAIY,mBAAgB,IAAI,EAAK;MAC9CC,UAAO,SAAWA,UAAW;IAC9BrB;SACC;IACDA;EAED;EACA,WAAU;IAAAA,IAAU;IAAQD,IAAC;IAAAS;EAAA;EAC7BZ,SAAO,SAAQ;EAChB","names":["invariant","DocumentType","cache","Map","operationName","type","name","Query","Mutation","Subscription","parser","document","cached","get","variables","__DEV__","fragments","definitions","filter","x","kind","queries","operation","mutations","subscriptions","length","variableDefinitions","definition"],"sources":["C:\\Users\\Hernan\\Desktop\\Proyectos\\login\\node_modules\\@apollo\\src\\react\\parser\\index.ts"],"sourcesContent":["import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition'\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'query'\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'mutation'\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'subscription'\n  );\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}