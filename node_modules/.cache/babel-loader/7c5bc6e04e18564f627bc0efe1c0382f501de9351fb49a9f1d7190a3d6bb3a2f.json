{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { ApolloError } from \"../../errors/index.js\";\nimport { NetworkStatus } from \"../../core/index.js\";\nimport { DocumentType } from \"../parser/index.js\";\nimport { OperationData } from \"./OperationData.js\";\nvar QueryData = function (_super) {\n  __extends(QueryData, _super);\n  function QueryData(_a) {\n    var options = _a.options,\n      context = _a.context,\n      onNewData = _a.onNewData;\n    var _this = _super.call(this, options, context) || this;\n    _this.runLazy = false;\n    _this.previous = Object.create(null);\n    _this.runLazyQuery = function (options) {\n      _this.cleanup();\n      _this.runLazy = true;\n      _this.lazyOptions = options;\n      _this.onNewData();\n    };\n    _this.obsRefetch = function (variables) {\n      var _a;\n      return (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.refetch(variables);\n    };\n    _this.obsFetchMore = function (fetchMoreOptions) {\n      var _a;\n      return (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.fetchMore(fetchMoreOptions);\n    };\n    _this.obsUpdateQuery = function (mapFn) {\n      var _a;\n      return (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.updateQuery(mapFn);\n    };\n    _this.obsStartPolling = function (pollInterval) {\n      var _a;\n      (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.startPolling(pollInterval);\n    };\n    _this.obsStopPolling = function () {\n      var _a;\n      (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.stopPolling();\n    };\n    _this.obsSubscribeToMore = function (options) {\n      var _a;\n      return (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.subscribeToMore(options);\n    };\n    _this.onNewData = onNewData;\n    return _this;\n  }\n  QueryData.prototype.execute = function () {\n    this.refreshClient();\n    var _a = this.getOptions(),\n      skip = _a.skip,\n      query = _a.query;\n    if (skip || query !== this.previous.query) {\n      this.removeQuerySubscription();\n      this.removeObservable(!skip);\n      this.previous.query = query;\n    }\n    this.updateObservableQuery();\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  };\n  QueryData.prototype.executeLazy = function () {\n    return !this.runLazy ? [this.runLazyQuery, {\n      loading: false,\n      networkStatus: NetworkStatus.ready,\n      called: false,\n      data: undefined\n    }] : [this.runLazyQuery, this.execute()];\n  };\n  QueryData.prototype.fetchData = function () {\n    var _this = this;\n    var options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(function (resolve) {\n      return _this.startQuerySubscription(resolve);\n    });\n  };\n  QueryData.prototype.afterExecute = function (_a) {\n    var _b = _a === void 0 ? {} : _a,\n      _c = _b.lazy,\n      lazy = _c === void 0 ? false : _c;\n    this.isMounted = true;\n    var options = this.getOptions();\n    if (this.currentObservable && !this.ssrInitiated()) {\n      this.startQuerySubscription();\n    }\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n    this.previousOptions = options;\n    return this.unmount.bind(this);\n  };\n  QueryData.prototype.cleanup = function () {\n    this.removeQuerySubscription();\n    this.removeObservable(true);\n    delete this.previous.result;\n  };\n  QueryData.prototype.getOptions = function () {\n    var options = _super.prototype.getOptions.call(this);\n    if (this.lazyOptions) {\n      options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);\n      options.context = __assign(__assign({}, options.context), this.lazyOptions.context);\n    }\n    if (this.runLazy) {\n      delete options.skip;\n    }\n    return options;\n  };\n  QueryData.prototype.ssrInitiated = function () {\n    return this.context && this.context.renderPromises;\n  };\n  QueryData.prototype.getExecuteSsrResult = function () {\n    var _a = this.getOptions(),\n      ssr = _a.ssr,\n      skip = _a.skip;\n    var ssrDisabled = ssr === false;\n    var fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n    var ssrLoading = __assign({\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client\n    }, this.observableQueryFields());\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previous.result = ssrLoading;\n      return ssrLoading;\n    }\n    if (this.ssrInitiated()) {\n      var result = this.getExecuteResult() || ssrLoading;\n      if (result.loading && !skip) {\n        this.context.renderPromises.addQueryPromise(this, function () {\n          return null;\n        });\n      }\n      return result;\n    }\n  };\n  QueryData.prototype.prepareObservableQueryOptions = function () {\n    var options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    var displayName = options.displayName || 'Query';\n    if (this.ssrInitiated() && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options.fetchPolicy = 'cache-first';\n    }\n    return __assign(__assign({}, options), {\n      displayName: displayName,\n      context: options.context\n    });\n  };\n  QueryData.prototype.initializeObservableQuery = function () {\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context.renderPromises.getSSRObservable(this.getOptions());\n    }\n    if (!this.currentObservable) {\n      var observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previous.observableQueryOptions = __assign(__assign({}, observableQueryOptions), {\n        children: void 0\n      });\n      this.currentObservable = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));\n      if (this.ssrInitiated()) {\n        this.context.renderPromises.registerSSRObservable(this.currentObservable, observableQueryOptions);\n      }\n    }\n  };\n  QueryData.prototype.updateObservableQuery = function () {\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n    var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), {\n      children: void 0\n    });\n    if (this.getOptions().skip) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      return;\n    }\n    if (!equal(newObservableQueryOptions, this.previous.observableQueryOptions)) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable.setOptions(newObservableQueryOptions).catch(function () {});\n    }\n  };\n  QueryData.prototype.startQuerySubscription = function (onNewData) {\n    var _this = this;\n    if (onNewData === void 0) {\n      onNewData = this.onNewData;\n    }\n    if (this.currentSubscription || this.getOptions().skip) return;\n    this.currentSubscription = this.currentObservable.subscribe({\n      next: function (_a) {\n        var loading = _a.loading,\n          networkStatus = _a.networkStatus,\n          data = _a.data;\n        var previousResult = _this.previous.result;\n        if (previousResult && previousResult.loading === loading && previousResult.networkStatus === networkStatus && equal(previousResult.data, data)) {\n          return;\n        }\n        onNewData();\n      },\n      error: function (error) {\n        _this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n        var previousResult = _this.previous.result;\n        if (previousResult && previousResult.loading || !equal(error, _this.previous.error)) {\n          _this.previous.error = error;\n          onNewData();\n        }\n      }\n    });\n  };\n  QueryData.prototype.resubscribeToQuery = function () {\n    this.removeQuerySubscription();\n    var currentObservable = this.currentObservable;\n    if (currentObservable) {\n      var last = currentObservable[\"last\"];\n      try {\n        currentObservable.resetLastResults();\n        this.startQuerySubscription();\n      } finally {\n        currentObservable[\"last\"] = last;\n      }\n    }\n  };\n  QueryData.prototype.getExecuteResult = function () {\n    var result = this.observableQueryFields();\n    var options = this.getOptions();\n    if (options.skip) {\n      result = __assign(__assign({}, result), {\n        data: undefined,\n        error: undefined,\n        loading: false,\n        networkStatus: NetworkStatus.ready,\n        called: true\n      });\n    } else if (this.currentObservable) {\n      var currentResult = this.currentObservable.getCurrentResult();\n      var data = currentResult.data,\n        loading = currentResult.loading,\n        partial = currentResult.partial,\n        networkStatus = currentResult.networkStatus,\n        errors = currentResult.errors;\n      var error = currentResult.error;\n      if (errors && errors.length > 0) {\n        error = new ApolloError({\n          graphQLErrors: errors\n        });\n      }\n      result = __assign(__assign({}, result), {\n        data: data,\n        loading: loading,\n        networkStatus: networkStatus,\n        error: error,\n        called: true\n      });\n      if (loading) {} else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.getLastResult() || {}).data\n        });\n      } else {\n        var fetchPolicy = this.currentObservable.options.fetchPolicy;\n        var partialRefetch = options.partialRefetch;\n        if (partialRefetch && partial && (!data || Object.keys(data).length === 0) && fetchPolicy !== 'cache-only') {\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n      }\n    }\n    result.client = this.client;\n    this.setOptions(options, true);\n    var previousResult = this.previous.result;\n    this.previous.loading = previousResult && previousResult.loading || false;\n    result.previousData = previousResult && (previousResult.data || previousResult.previousData);\n    this.previous.result = result;\n    this.currentObservable && this.currentObservable.resetQueryStoreErrors();\n    return result;\n  };\n  QueryData.prototype.handleErrorOrCompleted = function () {\n    if (!this.currentObservable || !this.previous.result) return;\n    var _a = this.previous.result,\n      data = _a.data,\n      loading = _a.loading,\n      error = _a.error;\n    if (!loading) {\n      var _b = this.getOptions(),\n        query = _b.query,\n        variables = _b.variables,\n        onCompleted = _b.onCompleted,\n        onError = _b.onError,\n        skip = _b.skip;\n      if (this.previousOptions && !this.previous.loading && equal(this.previousOptions.query, query) && equal(this.previousOptions.variables, variables)) {\n        return;\n      }\n      if (onCompleted && !error && !skip) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  };\n  QueryData.prototype.removeQuerySubscription = function () {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  };\n  QueryData.prototype.removeObservable = function (andDelete) {\n    if (this.currentObservable) {\n      this.currentObservable[\"tearDownQuery\"]();\n      if (andDelete) {\n        delete this.currentObservable;\n      }\n    }\n  };\n  QueryData.prototype.observableQueryFields = function () {\n    var _a;\n    return {\n      variables: (_a = this.currentObservable) === null || _a === void 0 ? void 0 : _a.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    };\n  };\n  return QueryData;\n}(OperationData);\nexport { QueryData };","map":{"version":3,"mappings":"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","names":["equal","ApolloError","NetworkStatus","DocumentType","OperationData","__extends","_a","options","context","onNewData","_super","_this","Object","create","cleanup","runLazy","lazyOptions","variables","currentObservable","refetch","fetchMoreOptions","fetchMore","mapFn","updateQuery","pollInterval","startPolling","stopPolling","subscribeToMore","QueryData","refreshClient","getOptions","skip","query","previous","removeQuerySubscription","removeObservable","updateObservableQuery","getExecuteSsrResult","getExecuteResult","runLazyQuery","loading","networkStatus","ready","called","data","undefined","execute","ssr","Promise","startQuerySubscription","resolve","_b","_c","lazy","isMounted","ssrInitiated","handleErrorOrCompleted","previousOptions","unmount","bind","result","__assign","renderPromises","ssrDisabled","fetchDisabled","client","disableNetworkFetches","ssrLoading","stale","observableQueryFields","addQueryPromise","verifyDocumentType","Query","displayName","fetchPolicy","getSSRObservable","observableQueryOptions","prepareObservableQueryOptions","children","watchQuery","registerSSRObservable","initializeObservableQuery","newObservableQueryOptions","setOptions","catch","currentSubscription","subscribe","next","previousResult","error","resubscribeToQuery","hasOwnProperty","last","resetLastResults","currentResult","getCurrentResult","partial","errors","length","graphQLErrors","assign","getLastResult","partialRefetch","keys","previousData","resetQueryStoreErrors","onCompleted","onError","unsubscribe","andDelete","obsRefetch","obsFetchMore","obsUpdateQuery","obsStartPolling","obsStopPolling","obsSubscribeToMore"],"sources":["C:\\Users\\Hernan\\Desktop\\Proyectos\\login\\node_modules\\@apollo\\src\\react\\data\\QueryData.ts"],"sourcesContent":["import { equal } from '@wry/equality';\n\nimport { ApolloError } from '../../errors';\n\nimport {\n  ApolloClient,\n  NetworkStatus,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  ObservableQuery,\n  FetchMoreOptions,\n  UpdateQueryOptions,\n  DocumentNode,\n  TypedDocumentNode,\n} from '../../core';\n\nimport {\n  ObservableSubscription\n} from '../../utilities';\n\nimport { DocumentType } from '../parser';\nimport {\n  QueryResult,\n  QueryDataOptions,\n  QueryTuple,\n  QueryLazyOptions,\n  ObservableQueryFields,\n} from '../types/types';\nimport { OperationData } from './OperationData';\n\ntype ObservableQueryOptions<TData, TVars> =\n  ReturnType<QueryData<TData, TVars>[\"prepareObservableQueryOptions\"]>;\n\nexport class QueryData<TData, TVariables> extends OperationData<\n  QueryDataOptions<TData, TVariables>\n> {\n  public onNewData: () => void;\n  public currentObservable?: ObservableQuery<TData, TVariables>;\n  private currentSubscription?: ObservableSubscription;\n  private runLazy: boolean = false;\n  private lazyOptions?: QueryLazyOptions<TVariables>;\n  private previous: {\n    client?: ApolloClient<object>;\n    query?: DocumentNode | TypedDocumentNode<TData, TVariables>;\n    observableQueryOptions?: ObservableQueryOptions<TData, TVariables>;\n    result?: QueryResult<TData, TVariables>;\n    loading?: boolean;\n    options?: QueryDataOptions<TData, TVariables>;\n    error?: ApolloError;\n  } = Object.create(null);\n\n  constructor({\n    options,\n    context,\n    onNewData\n  }: {\n    options: QueryDataOptions<TData, TVariables>;\n    context: any;\n    onNewData: () => void;\n  }) {\n    super(options, context);\n    this.onNewData = onNewData;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previous.query) {\n      this.removeQuerySubscription();\n      this.removeObservable(!skip);\n      this.previous.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  }\n\n  public executeLazy(): QueryTuple<TData, TVariables> {\n    return !this.runLazy\n      ? [\n          this.runLazyQuery,\n          {\n            loading: false,\n            networkStatus: NetworkStatus.ready,\n            called: false,\n            data: undefined\n          }\n        ]\n      : [this.runLazyQuery, this.execute()];\n  }\n\n  // For server-side rendering\n  public fetchData(): Promise<void> | boolean {\n    const options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(resolve => this.startQuerySubscription(resolve));\n  }\n\n  public afterExecute({ lazy = false }: { lazy?: boolean } = {}) {\n    this.isMounted = true;\n    const options = this.getOptions();\n    if (this.currentObservable && !this.ssrInitiated()) {\n      this.startQuerySubscription();\n    }\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = options;\n    return this.unmount.bind(this);\n  }\n\n  public cleanup() {\n    this.removeQuerySubscription();\n    this.removeObservable(true);\n    delete this.previous.result;\n  }\n\n  public getOptions() {\n    const options = super.getOptions();\n\n    if (this.lazyOptions) {\n      options.variables = {\n        ...options.variables,\n        ...this.lazyOptions.variables\n      } as TVariables;\n      options.context = {\n        ...options.context,\n        ...this.lazyOptions.context\n      };\n    }\n\n    // skip is not supported when using lazy query execution.\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  }\n\n  public ssrInitiated() {\n    return this.context && this.context.renderPromises;\n  }\n\n  private runLazyQuery = (options?: QueryLazyOptions<TVariables>) => {\n    this.cleanup();\n    this.runLazy = true;\n    this.lazyOptions = options;\n    this.onNewData();\n  };\n\n  private getExecuteSsrResult() {\n    const { ssr, skip } = this.getOptions();\n    const ssrDisabled = ssr === false;\n    const fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    const ssrLoading = {\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client,\n      ...this.observableQueryFields(),\n    } as QueryResult<TData, TVariables>;\n\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previous.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    if (this.ssrInitiated()) {\n      const result = this.getExecuteResult() || ssrLoading;\n      if (result.loading && !skip) {\n        this.context.renderPromises!.addQueryPromise(this, () => null);\n      }\n      return result;\n    }\n  }\n\n  private prepareObservableQueryOptions() {\n    const options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    const displayName = options.displayName || 'Query';\n\n    // Set the fetchPolicy to cache-first for network-only and cache-and-network\n    // fetches for server side renders.\n    if (\n      this.ssrInitiated() &&\n      (options.fetchPolicy === 'network-only' ||\n        options.fetchPolicy === 'cache-and-network')\n    ) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return {\n      ...options,\n      displayName,\n      context: options.context,\n    };\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context!.renderPromises!.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n\n      this.previous.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: void 0,\n      };\n      this.currentObservable = this.refreshClient().client.watchQuery({\n        ...observableQueryOptions\n      });\n\n      if (this.ssrInitiated()) {\n        this.context!.renderPromises!.registerSSRObservable(\n          this.currentObservable,\n          observableQueryOptions\n        );\n      }\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: void 0,\n    };\n\n    if (this.getOptions().skip) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      return;\n    }\n\n    if (\n      !equal(newObservableQueryOptions, this.previous.observableQueryOptions)\n    ) {\n      this.previous.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  // Setup a subscription to watch for Apollo Client `ObservableQuery` changes.\n  // When new data is received, and it doesn't match the data that was used\n  // during the last `QueryData.execute` call (and ultimately the last query\n  // component render), trigger the `onNewData` callback. If not specified,\n  // `onNewData` will fallback to the default `QueryData.onNewData` function\n  // (which usually leads to a query component re-render).\n  private startQuerySubscription(onNewData: () => void = this.onNewData) {\n    if (this.currentSubscription || this.getOptions().skip) return;\n\n    this.currentSubscription = this.currentObservable!.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        const previousResult = this.previous.result;\n\n        // Make sure we're not attempting to re-render similar results\n        if (\n          previousResult &&\n          previousResult.loading === loading &&\n          previousResult.networkStatus === networkStatus &&\n          equal(previousResult.data, data)\n        ) {\n          return;\n        }\n\n        onNewData();\n      },\n      error: error => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n\n        const previousResult = this.previous.result;\n        if (\n          (previousResult && previousResult.loading) ||\n          !equal(error, this.previous.error)\n        ) {\n          this.previous.error = error;\n          onNewData();\n        }\n      }\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const { currentObservable } = this;\n    if (currentObservable) {\n      const last = currentObservable[\"last\"];\n      try {\n        currentObservable.resetLastResults();\n        this.startQuerySubscription();\n      } finally {\n        currentObservable[\"last\"] = last;\n      }\n    }\n  }\n\n  private getExecuteResult(): QueryResult<TData, TVariables> {\n    let result = this.observableQueryFields() as QueryResult<TData, TVariables>;\n    const options = this.getOptions();\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate\n    // that previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client\n    // 4.0 to address this.\n    if (options.skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false,\n        networkStatus: NetworkStatus.ready,\n        called: true,\n      };\n    } else if (this.currentObservable) {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.getCurrentResult();\n      const { data, loading, partial, networkStatus, errors } = currentResult;\n      let { error } = currentResult;\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      result = {\n        ...result,\n        data,\n        loading,\n        networkStatus,\n        error,\n        called: true\n      };\n\n      if (loading) {\n        // Fall through without modifying result...\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.getLastResult() || ({} as any))\n            .data\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.options;\n        const { partialRefetch } = options;\n        if (\n          partialRefetch &&\n          partial &&\n          (!data || Object.keys(data).length === 0) &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as `undefined` since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n      }\n    }\n\n    result.client = this.client;\n    // Store options as this.previousOptions.\n    this.setOptions(options, true);\n\n    const previousResult = this.previous.result;\n\n    this.previous.loading =\n      previousResult && previousResult.loading || false;\n\n    // Ensure the returned result contains previousData as a separate\n    // property, to give developers the flexibility of leveraging outdated\n    // data while new data is loading from the network. Falling back to\n    // previousResult.previousData when previousResult.data is falsy here\n    // allows result.previousData to persist across multiple results.\n    result.previousData = previousResult &&\n      (previousResult.data || previousResult.previousData);\n\n    this.previous.result = result;\n\n    // Any query errors that exist are now available in `result`, so we'll\n    // remove the original errors from the `ObservableQuery` query store to\n    // make sure they aren't re-displayed on subsequent (potentially error\n    // free) requests/responses.\n    this.currentObservable && this.currentObservable.resetQueryStoreErrors();\n\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    if (!this.currentObservable || !this.previous.result) return;\n\n    const { data, loading, error } = this.previous.result;\n\n    if (!loading) {\n      const {\n        query,\n        variables,\n        onCompleted,\n        onError,\n        skip\n      } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previous.loading &&\n        equal(this.previousOptions.query, query) &&\n        equal(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error && !skip) {\n        onCompleted(data as TData);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  }\n\n  private removeObservable(andDelete: boolean) {\n    if (this.currentObservable) {\n      this.currentObservable[\"tearDownQuery\"]();\n      if (andDelete) {\n        delete this.currentObservable;\n      }\n    }\n  }\n\n  private obsRefetch = (variables?: Partial<TVariables>) =>\n    this.currentObservable?.refetch(variables);\n\n  private obsFetchMore = (\n    fetchMoreOptions: FetchMoreQueryOptions<TVariables, TData> &\n      FetchMoreOptions<TData, TVariables>\n  ) => this.currentObservable?.fetchMore(fetchMoreOptions);\n\n  private obsUpdateQuery = <TVars = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: UpdateQueryOptions<TVars>\n    ) => TData\n  ) => this.currentObservable?.updateQuery(mapFn);\n\n  private obsStartPolling = (pollInterval: number) => {\n    this.currentObservable?.startPolling(pollInterval);\n  };\n\n  private obsStopPolling = () => {\n    this.currentObservable?.stopPolling();\n  };\n\n  private obsSubscribeToMore = <\n    TSubscriptionData = TData,\n    TSubscriptionVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >\n  ) => this.currentObservable?.subscribeToMore(options);\n\n  private observableQueryFields() {\n    return {\n      variables: this.currentObservable?.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}