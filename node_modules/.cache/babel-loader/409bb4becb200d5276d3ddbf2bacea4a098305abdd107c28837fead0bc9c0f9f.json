{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { invariant, InvariantError } from \"../../utilities/globals/index.js\";\nimport { Trie } from '@wry/trie';\nimport { getFragmentFromSelection, isField, getTypenameFromResult, storeKeyNameFromField, argumentsObjectFromField, isReference, getStoreKeyName, canUseWeakMap, isNonNullObject, stringifyForDisplay } from \"../../utilities/index.js\";\nimport { hasOwn, fieldNameFromStoreName, storeValueIsStoreObject, selectionSetMatchesResult, TypeOrFieldNameRegExp, defaultDataIdFromObject } from \"./helpers.js\";\nimport { cacheSlot } from \"./reactiveVars.js\";\nimport { canonicalStringify } from \"./object-canon.js\";\ngetStoreKeyName.setStringify(canonicalStringify);\nfunction argsFromFieldSpecifier(spec) {\n  return spec.args !== void 0 ? spec.args : spec.field ? argumentsObjectFromField(spec.field, spec.variables) : null;\n}\nvar nullKeyFieldsFn = function () {\n  return void 0;\n};\nvar simpleKeyArgsFn = function (_args, context) {\n  return context.fieldName;\n};\nvar mergeTrueFn = function (existing, incoming, _a) {\n  var mergeObjects = _a.mergeObjects;\n  return mergeObjects(existing, incoming);\n};\nvar mergeFalseFn = function (_, incoming) {\n  return incoming;\n};\nvar Policies = function () {\n  function Policies(config) {\n    this.config = config;\n    this.typePolicies = Object.create(null);\n    this.toBeAdded = Object.create(null);\n    this.supertypeMap = new Map();\n    this.fuzzySubtypes = new Map();\n    this.rootIdsByTypename = Object.create(null);\n    this.rootTypenamesById = Object.create(null);\n    this.usingPossibleTypes = false;\n    this.config = __assign({\n      dataIdFromObject: defaultDataIdFromObject\n    }, config);\n    this.cache = this.config.cache;\n    this.setRootTypename(\"Query\");\n    this.setRootTypename(\"Mutation\");\n    this.setRootTypename(\"Subscription\");\n    if (config.possibleTypes) {\n      this.addPossibleTypes(config.possibleTypes);\n    }\n    if (config.typePolicies) {\n      this.addTypePolicies(config.typePolicies);\n    }\n  }\n  Policies.prototype.identify = function (object, selectionSet, fragmentMap) {\n    var typename = selectionSet && fragmentMap ? getTypenameFromResult(object, selectionSet, fragmentMap) : object.__typename;\n    if (typename === this.rootTypenamesById.ROOT_QUERY) {\n      return [\"ROOT_QUERY\"];\n    }\n    var context = {\n      typename: typename,\n      selectionSet: selectionSet,\n      fragmentMap: fragmentMap\n    };\n    var id;\n    var policy = typename && this.getTypePolicy(typename);\n    var keyFn = policy && policy.keyFn || this.config.dataIdFromObject;\n    while (keyFn) {\n      var specifierOrId = keyFn(object, context);\n      if (Array.isArray(specifierOrId)) {\n        keyFn = keyFieldsFnFromSpecifier(specifierOrId);\n      } else {\n        id = specifierOrId;\n        break;\n      }\n    }\n    id = id ? String(id) : void 0;\n    return context.keyObject ? [id, context.keyObject] : [id];\n  };\n  Policies.prototype.addTypePolicies = function (typePolicies) {\n    var _this = this;\n    Object.keys(typePolicies).forEach(function (typename) {\n      var _a = typePolicies[typename],\n        queryType = _a.queryType,\n        mutationType = _a.mutationType,\n        subscriptionType = _a.subscriptionType,\n        incoming = __rest(_a, [\"queryType\", \"mutationType\", \"subscriptionType\"]);\n      if (queryType) _this.setRootTypename(\"Query\", typename);\n      if (mutationType) _this.setRootTypename(\"Mutation\", typename);\n      if (subscriptionType) _this.setRootTypename(\"Subscription\", typename);\n      if (hasOwn.call(_this.toBeAdded, typename)) {\n        _this.toBeAdded[typename].push(incoming);\n      } else {\n        _this.toBeAdded[typename] = [incoming];\n      }\n    });\n  };\n  Policies.prototype.updateTypePolicy = function (typename, incoming) {\n    var _this = this;\n    var existing = this.getTypePolicy(typename);\n    var keyFields = incoming.keyFields,\n      fields = incoming.fields;\n    function setMerge(existing, merge) {\n      existing.merge = typeof merge === \"function\" ? merge : merge === true ? mergeTrueFn : merge === false ? mergeFalseFn : existing.merge;\n    }\n    setMerge(existing, incoming.merge);\n    existing.keyFn = keyFields === false ? nullKeyFieldsFn : Array.isArray(keyFields) ? keyFieldsFnFromSpecifier(keyFields) : typeof keyFields === \"function\" ? keyFields : existing.keyFn;\n    if (fields) {\n      Object.keys(fields).forEach(function (fieldName) {\n        var existing = _this.getFieldPolicy(typename, fieldName, true);\n        var incoming = fields[fieldName];\n        if (typeof incoming === \"function\") {\n          existing.read = incoming;\n        } else {\n          var keyArgs = incoming.keyArgs,\n            read = incoming.read,\n            merge = incoming.merge;\n          existing.keyFn = keyArgs === false ? simpleKeyArgsFn : Array.isArray(keyArgs) ? keyArgsFnFromSpecifier(keyArgs) : typeof keyArgs === \"function\" ? keyArgs : existing.keyFn;\n          if (typeof read === \"function\") {\n            existing.read = read;\n          }\n          setMerge(existing, merge);\n        }\n        if (existing.read && existing.merge) {\n          existing.keyFn = existing.keyFn || simpleKeyArgsFn;\n        }\n      });\n    }\n  };\n  Policies.prototype.setRootTypename = function (which, typename) {\n    if (typename === void 0) {\n      typename = which;\n    }\n    var rootId = \"ROOT_\" + which.toUpperCase();\n    var old = this.rootTypenamesById[rootId];\n    if (typename !== old) {\n      __DEV__ ? invariant(!old || old === which, \"Cannot change root \" + which + \" __typename more than once\") : invariant(!old || old === which, 2);\n      if (old) delete this.rootIdsByTypename[old];\n      this.rootIdsByTypename[typename] = rootId;\n      this.rootTypenamesById[rootId] = typename;\n    }\n  };\n  Policies.prototype.addPossibleTypes = function (possibleTypes) {\n    var _this = this;\n    this.usingPossibleTypes = true;\n    Object.keys(possibleTypes).forEach(function (supertype) {\n      _this.getSupertypeSet(supertype, true);\n      possibleTypes[supertype].forEach(function (subtype) {\n        _this.getSupertypeSet(subtype, true).add(supertype);\n        var match = subtype.match(TypeOrFieldNameRegExp);\n        if (!match || match[0] !== subtype) {\n          _this.fuzzySubtypes.set(subtype, new RegExp(subtype));\n        }\n      });\n    });\n  };\n  Policies.prototype.getTypePolicy = function (typename) {\n    var _this = this;\n    if (!hasOwn.call(this.typePolicies, typename)) {\n      var policy_1 = this.typePolicies[typename] = Object.create(null);\n      policy_1.fields = Object.create(null);\n      var supertypes = this.supertypeMap.get(typename);\n      if (supertypes && supertypes.size) {\n        supertypes.forEach(function (supertype) {\n          var _a = _this.getTypePolicy(supertype),\n            fields = _a.fields,\n            rest = __rest(_a, [\"fields\"]);\n          Object.assign(policy_1, rest);\n          Object.assign(policy_1.fields, fields);\n        });\n      }\n    }\n    var inbox = this.toBeAdded[typename];\n    if (inbox && inbox.length) {\n      inbox.splice(0).forEach(function (policy) {\n        _this.updateTypePolicy(typename, policy);\n      });\n    }\n    return this.typePolicies[typename];\n  };\n  Policies.prototype.getFieldPolicy = function (typename, fieldName, createIfMissing) {\n    if (typename) {\n      var fieldPolicies = this.getTypePolicy(typename).fields;\n      return fieldPolicies[fieldName] || createIfMissing && (fieldPolicies[fieldName] = Object.create(null));\n    }\n  };\n  Policies.prototype.getSupertypeSet = function (subtype, createIfMissing) {\n    var supertypeSet = this.supertypeMap.get(subtype);\n    if (!supertypeSet && createIfMissing) {\n      this.supertypeMap.set(subtype, supertypeSet = new Set());\n    }\n    return supertypeSet;\n  };\n  Policies.prototype.fragmentMatches = function (fragment, typename, result, variables) {\n    var _this = this;\n    if (!fragment.typeCondition) return true;\n    if (!typename) return false;\n    var supertype = fragment.typeCondition.name.value;\n    if (typename === supertype) return true;\n    if (this.usingPossibleTypes && this.supertypeMap.has(supertype)) {\n      var typenameSupertypeSet = this.getSupertypeSet(typename, true);\n      var workQueue_1 = [typenameSupertypeSet];\n      var maybeEnqueue_1 = function (subtype) {\n        var supertypeSet = _this.getSupertypeSet(subtype, false);\n        if (supertypeSet && supertypeSet.size && workQueue_1.indexOf(supertypeSet) < 0) {\n          workQueue_1.push(supertypeSet);\n        }\n      };\n      var needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);\n      var checkingFuzzySubtypes = false;\n      for (var i = 0; i < workQueue_1.length; ++i) {\n        var supertypeSet = workQueue_1[i];\n        if (supertypeSet.has(supertype)) {\n          if (!typenameSupertypeSet.has(supertype)) {\n            if (checkingFuzzySubtypes) {\n              __DEV__ && invariant.warn(\"Inferring subtype \" + typename + \" of supertype \" + supertype);\n            }\n            typenameSupertypeSet.add(supertype);\n          }\n          return true;\n        }\n        supertypeSet.forEach(maybeEnqueue_1);\n        if (needToCheckFuzzySubtypes && i === workQueue_1.length - 1 && selectionSetMatchesResult(fragment.selectionSet, result, variables)) {\n          needToCheckFuzzySubtypes = false;\n          checkingFuzzySubtypes = true;\n          this.fuzzySubtypes.forEach(function (regExp, fuzzyString) {\n            var match = typename.match(regExp);\n            if (match && match[0] === typename) {\n              maybeEnqueue_1(fuzzyString);\n            }\n          });\n        }\n      }\n    }\n    return false;\n  };\n  Policies.prototype.hasKeyArgs = function (typename, fieldName) {\n    var policy = this.getFieldPolicy(typename, fieldName, false);\n    return !!(policy && policy.keyFn);\n  };\n  Policies.prototype.getStoreFieldName = function (fieldSpec) {\n    var typename = fieldSpec.typename,\n      fieldName = fieldSpec.fieldName;\n    var policy = this.getFieldPolicy(typename, fieldName, false);\n    var storeFieldName;\n    var keyFn = policy && policy.keyFn;\n    if (keyFn && typename) {\n      var context = {\n        typename: typename,\n        fieldName: fieldName,\n        field: fieldSpec.field || null,\n        variables: fieldSpec.variables\n      };\n      var args = argsFromFieldSpecifier(fieldSpec);\n      while (keyFn) {\n        var specifierOrString = keyFn(args, context);\n        if (Array.isArray(specifierOrString)) {\n          keyFn = keyArgsFnFromSpecifier(specifierOrString);\n        } else {\n          storeFieldName = specifierOrString || fieldName;\n          break;\n        }\n      }\n    }\n    if (storeFieldName === void 0) {\n      storeFieldName = fieldSpec.field ? storeKeyNameFromField(fieldSpec.field, fieldSpec.variables) : getStoreKeyName(fieldName, argsFromFieldSpecifier(fieldSpec));\n    }\n    if (storeFieldName === false) {\n      return fieldName;\n    }\n    return fieldName === fieldNameFromStoreName(storeFieldName) ? storeFieldName : fieldName + \":\" + storeFieldName;\n  };\n  Policies.prototype.readField = function (options, context) {\n    var objectOrReference = options.from;\n    if (!objectOrReference) return;\n    var nameOrField = options.field || options.fieldName;\n    if (!nameOrField) return;\n    if (options.typename === void 0) {\n      var typename = context.store.getFieldValue(objectOrReference, \"__typename\");\n      if (typename) options.typename = typename;\n    }\n    var storeFieldName = this.getStoreFieldName(options);\n    var fieldName = fieldNameFromStoreName(storeFieldName);\n    var existing = context.store.getFieldValue(objectOrReference, storeFieldName);\n    var policy = this.getFieldPolicy(options.typename, fieldName, false);\n    var read = policy && policy.read;\n    if (read) {\n      var readOptions = makeFieldFunctionOptions(this, objectOrReference, options, context, context.store.getStorage(isReference(objectOrReference) ? objectOrReference.__ref : objectOrReference, storeFieldName));\n      return cacheSlot.withValue(this.cache, read, [existing, readOptions]);\n    }\n    return existing;\n  };\n  Policies.prototype.getMergeFunction = function (parentTypename, fieldName, childTypename) {\n    var policy = this.getFieldPolicy(parentTypename, fieldName, false);\n    var merge = policy && policy.merge;\n    if (!merge && childTypename) {\n      policy = this.getTypePolicy(childTypename);\n      merge = policy && policy.merge;\n    }\n    return merge;\n  };\n  Policies.prototype.runMergeFunction = function (existing, incoming, _a, context, storage) {\n    var field = _a.field,\n      typename = _a.typename,\n      merge = _a.merge;\n    if (merge === mergeTrueFn) {\n      return makeMergeObjectsFunction(context.store)(existing, incoming);\n    }\n    if (merge === mergeFalseFn) {\n      return incoming;\n    }\n    if (context.overwrite) {\n      existing = void 0;\n    }\n    return merge(existing, incoming, makeFieldFunctionOptions(this, void 0, {\n      typename: typename,\n      fieldName: field.name.value,\n      field: field,\n      variables: context.variables\n    }, context, storage || Object.create(null)));\n  };\n  return Policies;\n}();\nexport { Policies };\nfunction makeFieldFunctionOptions(policies, objectOrReference, fieldSpec, context, storage) {\n  var storeFieldName = policies.getStoreFieldName(fieldSpec);\n  var fieldName = fieldNameFromStoreName(storeFieldName);\n  var variables = fieldSpec.variables || context.variables;\n  var _a = context.store,\n    toReference = _a.toReference,\n    canRead = _a.canRead;\n  return {\n    args: argsFromFieldSpecifier(fieldSpec),\n    field: fieldSpec.field || null,\n    fieldName: fieldName,\n    storeFieldName: storeFieldName,\n    variables: variables,\n    isReference: isReference,\n    toReference: toReference,\n    storage: storage,\n    cache: policies.cache,\n    canRead: canRead,\n    readField: function (fieldNameOrOptions, from) {\n      var options;\n      if (typeof fieldNameOrOptions === \"string\") {\n        options = {\n          fieldName: fieldNameOrOptions,\n          from: arguments.length > 1 ? from : objectOrReference\n        };\n      } else if (isNonNullObject(fieldNameOrOptions)) {\n        options = __assign({}, fieldNameOrOptions);\n        if (!hasOwn.call(fieldNameOrOptions, \"from\")) {\n          options.from = objectOrReference;\n        }\n      } else {\n        __DEV__ && invariant.warn(\"Unexpected readField arguments: \" + stringifyForDisplay(Array.from(arguments)));\n        return;\n      }\n      if (__DEV__ && options.from === void 0) {\n        __DEV__ && invariant.warn(\"Undefined 'from' passed to readField with arguments \" + stringifyForDisplay(Array.from(arguments)));\n      }\n      if (void 0 === options.variables) {\n        options.variables = variables;\n      }\n      return policies.readField(options, context);\n    },\n    mergeObjects: makeMergeObjectsFunction(context.store)\n  };\n}\nfunction makeMergeObjectsFunction(store) {\n  return function mergeObjects(existing, incoming) {\n    if (Array.isArray(existing) || Array.isArray(incoming)) {\n      throw __DEV__ ? new InvariantError(\"Cannot automatically merge arrays\") : new InvariantError(3);\n    }\n    if (isNonNullObject(existing) && isNonNullObject(incoming)) {\n      var eType = store.getFieldValue(existing, \"__typename\");\n      var iType = store.getFieldValue(incoming, \"__typename\");\n      var typesDiffer = eType && iType && eType !== iType;\n      if (typesDiffer) {\n        return incoming;\n      }\n      if (isReference(existing) && storeValueIsStoreObject(incoming)) {\n        store.merge(existing.__ref, incoming);\n        return existing;\n      }\n      if (storeValueIsStoreObject(existing) && isReference(incoming)) {\n        store.merge(existing, incoming.__ref);\n        return incoming;\n      }\n      if (storeValueIsStoreObject(existing) && storeValueIsStoreObject(incoming)) {\n        return __assign(__assign({}, existing), incoming);\n      }\n    }\n    return incoming;\n  };\n}\nfunction keyArgsFnFromSpecifier(specifier) {\n  return function (args, context) {\n    return args ? context.fieldName + \":\" + JSON.stringify(computeKeyObject(args, specifier, false)) : context.fieldName;\n  };\n}\nfunction keyFieldsFnFromSpecifier(specifier) {\n  var trie = new Trie(canUseWeakMap);\n  return function (object, context) {\n    var aliasMap;\n    if (context.selectionSet && context.fragmentMap) {\n      var info = trie.lookupArray([context.selectionSet, context.fragmentMap]);\n      aliasMap = info.aliasMap || (info.aliasMap = makeAliasMap(context.selectionSet, context.fragmentMap));\n    }\n    var keyObject = context.keyObject = computeKeyObject(object, specifier, true, aliasMap);\n    return context.typename + \":\" + JSON.stringify(keyObject);\n  };\n}\nfunction makeAliasMap(selectionSet, fragmentMap) {\n  var map = Object.create(null);\n  var workQueue = new Set([selectionSet]);\n  workQueue.forEach(function (selectionSet) {\n    selectionSet.selections.forEach(function (selection) {\n      if (isField(selection)) {\n        if (selection.alias) {\n          var responseKey = selection.alias.value;\n          var storeKey = selection.name.value;\n          if (storeKey !== responseKey) {\n            var aliases = map.aliases || (map.aliases = Object.create(null));\n            aliases[storeKey] = responseKey;\n          }\n        }\n        if (selection.selectionSet) {\n          var subsets = map.subsets || (map.subsets = Object.create(null));\n          subsets[selection.name.value] = makeAliasMap(selection.selectionSet, fragmentMap);\n        }\n      } else {\n        var fragment = getFragmentFromSelection(selection, fragmentMap);\n        if (fragment) {\n          workQueue.add(fragment.selectionSet);\n        }\n      }\n    });\n  });\n  return map;\n}\nfunction computeKeyObject(response, specifier, strict, aliasMap) {\n  var keyObj = Object.create(null);\n  var lastResponseKey;\n  var lastActualKey;\n  specifier.forEach(function (s) {\n    if (Array.isArray(s)) {\n      if (typeof lastActualKey === \"string\" && typeof lastResponseKey === \"string\") {\n        var subsets = aliasMap && aliasMap.subsets;\n        var subset = subsets && subsets[lastActualKey];\n        keyObj[lastActualKey] = computeKeyObject(response[lastResponseKey], s, strict, subset);\n      }\n    } else {\n      var aliases = aliasMap && aliasMap.aliases;\n      var responseName = aliases && aliases[s] || s;\n      if (hasOwn.call(response, responseName)) {\n        keyObj[lastActualKey = s] = response[lastResponseKey = responseName];\n      } else {\n        __DEV__ ? invariant(!strict, \"Missing field '\" + responseName + \"' while computing key fields\") : invariant(!strict, 4);\n        lastResponseKey = lastActualKey = void 0;\n      }\n    }\n  });\n  return keyObj;\n}","map":{"version":3,"mappings":"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","names":["invariant","InvariantError","Trie","getFragmentFromSelection","isField","getTypenameFromResult","storeKeyNameFromField","argumentsObjectFromField","isReference","getStoreKeyName","canUseWeakMap","isNonNullObject","stringifyForDisplay","hasOwn","fieldNameFromStoreName","storeValueIsStoreObject","selectionSetMatchesResult","TypeOrFieldNameRegExp","defaultDataIdFromObject","cacheSlot","canonicalStringify","setStringify","argsFromFieldSpecifier","spec","args","field","variables","nullKeyFieldsFn","simpleKeyArgsFn","_args","context","fieldName","mergeTrueFn","existing","incoming","_a","mergeObjects","mergeFalseFn","_","config","Object","create","Map","dataIdFromObject","cache","setRootTypename","possibleTypes","addPossibleTypes","typePolicies","addTypePolicies","Policies","object","selectionSet","fragmentMap","typename","__typename","rootTypenamesById","ROOT_QUERY","id","policy","getTypePolicy","keyFn","specifierOrId","Array","isArray","keyFieldsFnFromSpecifier","String","keyObject","keys","forEach","queryType","mutationType","subscriptionType","_this","call","toBeAdded","push","fields","setMerge","merge","keyFields","getFieldPolicy","read","keyArgs","keyArgsFnFromSpecifier","which","rootId","toUpperCase","old","__DEV__","rootIdsByTypename","usingPossibleTypes","getSupertypeSet","supertype","subtype","add","match","fuzzySubtypes","set","RegExp","policy_1","supertypes","supertypeMap","get","size","rest","assign","inbox","length","splice","updateTypePolicy","createIfMissing","fieldPolicies","supertypeSet","Set","fragment","result","typeCondition","name","value","has","typenameSupertypeSet","workQueue_1","maybeEnqueue_1","indexOf","needToCheckFuzzySubtypes","checkingFuzzySubtypes","i","regExp","fuzzyString","fieldSpec","storeFieldName","specifierOrString","options","objectOrReference","from","nameOrField","store","getFieldValue","getStoreFieldName","readOptions","makeFieldFunctionOptions","getStorage","__ref","withValue","parentTypename","childTypename","storage","makeMergeObjectsFunction","overwrite","policies","toReference","canRead","readField","fieldNameOrOptions","arguments","eType","iType","typesDiffer","specifier","JSON","stringify","computeKeyObject","trie","aliasMap","info","lookupArray","makeAliasMap","map","workQueue","selections","selection","alias","responseKey","storeKey","aliases","subsets","response","strict","keyObj","lastResponseKey","lastActualKey","s","subset","responseName"],"sources":["C:\\Users\\Hernan\\Desktop\\Proyectos\\login\\node_modules\\@apollo\\src\\cache\\inmemory\\policies.ts"],"sourcesContent":["import { invariant, InvariantError } from '../../utilities/globals';\n\nimport {\n  InlineFragmentNode,\n  FragmentDefinitionNode,\n  SelectionSetNode,\n  FieldNode,\n} from 'graphql';\n\nimport { Trie } from '@wry/trie';\n\nimport {\n  FragmentMap,\n  getFragmentFromSelection,\n  isField,\n  getTypenameFromResult,\n  storeKeyNameFromField,\n  StoreValue,\n  StoreObject,\n  argumentsObjectFromField,\n  Reference,\n  isReference,\n  getStoreKeyName,\n  canUseWeakMap,\n  isNonNullObject,\n  stringifyForDisplay,\n} from '../../utilities';\nimport {\n  IdGetter,\n  MergeInfo,\n  NormalizedCache,\n  ReadMergeModifyContext,\n} from \"./types\";\nimport {\n  hasOwn,\n  fieldNameFromStoreName,\n  storeValueIsStoreObject,\n  selectionSetMatchesResult,\n  TypeOrFieldNameRegExp,\n  defaultDataIdFromObject,\n} from './helpers';\nimport { cacheSlot } from './reactiveVars';\nimport { InMemoryCache } from './inMemoryCache';\nimport {\n  SafeReadonly,\n  FieldSpecifier,\n  ToReferenceFunction,\n  ReadFieldFunction,\n  ReadFieldOptions,\n  CanReadFunction,\n} from '../core/types/common';\nimport { WriteContext } from './writeToStore';\n\n// Upgrade to a faster version of the default stable JSON.stringify function\n// used by getStoreKeyName. This function is used when computing storeFieldName\n// strings (when no keyArgs has been configured for a field).\nimport { canonicalStringify } from './object-canon';\n\ngetStoreKeyName.setStringify(canonicalStringify);\n\nexport type TypePolicies = {\n  [__typename: string]: TypePolicy;\n}\n\n// TypeScript 3.7 will allow recursive type aliases, so this should work:\n// type KeySpecifier = (string | KeySpecifier)[]\ntype KeySpecifier = (string | any[])[];\n\nexport type KeyFieldsContext = {\n  typename?: string;\n  selectionSet?: SelectionSetNode;\n  fragmentMap?: FragmentMap;\n  // May be set by the KeyFieldsFunction to report fields that were involved\n  // in computing the ID. Never passed in by the caller.\n  keyObject?: Record<string, any>;\n};\n\nexport type KeyFieldsFunction = (\n  object: Readonly<StoreObject>,\n  context: KeyFieldsContext,\n) => KeySpecifier | false | ReturnType<IdGetter>;\n\ntype KeyFieldsResult = Exclude<ReturnType<KeyFieldsFunction>, KeySpecifier>;\n\n// TODO Should TypePolicy be a generic type, with a TObject or TEntity\n// type parameter?\nexport type TypePolicy = {\n  // Allows defining the primary key fields for this type, either using an\n  // array of field names or a function that returns an arbitrary string.\n  keyFields?: KeySpecifier | KeyFieldsFunction | false;\n\n  // Allows defining a merge function (or merge:true/false shorthand) to\n  // be used for merging objects of this type wherever they appear, unless\n  // the parent field also defines a merge function/boolean (that is,\n  // parent field merge functions take precedence over type policy merge\n  // functions). In many cases, defining merge:true for a given type\n  // policy can save you from specifying merge:true for all the field\n  // policies where that type might be encountered.\n  merge?: FieldMergeFunction | boolean;\n\n  // In the rare event that your schema happens to use a different\n  // __typename for the root Query, Mutation, and/or Schema types, you can\n  // express your deviant preferences by enabling one of these options.\n  queryType?: true,\n  mutationType?: true,\n  subscriptionType?: true,\n\n  fields?: {\n    [fieldName: string]:\n      | FieldPolicy<any>\n      | FieldReadFunction<any>;\n  }\n};\n\nexport type KeyArgsFunction = (\n  args: Record<string, any> | null,\n  context: {\n    typename: string;\n    fieldName: string;\n    field: FieldNode | null;\n    variables?: Record<string, any>;\n  },\n) => KeySpecifier | false | ReturnType<IdGetter>;\n\ntype KeyArgsResult = Exclude<ReturnType<KeyArgsFunction>, KeySpecifier>;\n\nexport type FieldPolicy<\n  // The internal representation used to store the field's data in the\n  // cache. Must be JSON-serializable if you plan to serialize the result\n  // of cache.extract() using JSON.\n  TExisting = any,\n  // The type of the incoming parameter passed to the merge function,\n  // typically matching the GraphQL response format, but with Reference\n  // objects substituted for any identifiable child objects. Often the\n  // same as TExisting, but not necessarily.\n  TIncoming = TExisting,\n  // The type that the read function actually returns, using TExisting\n  // data and options.args as input. Usually the same as TIncoming.\n  TReadResult = TIncoming,\n  // Allows FieldFunctionOptions definition to be overwritten by the\n  // developer\n  TOptions extends FieldFunctionOptions = FieldFunctionOptions\n> = {\n  keyArgs?: KeySpecifier | KeyArgsFunction | false;\n  read?: FieldReadFunction<TExisting, TReadResult, TOptions>;\n  merge?: FieldMergeFunction<TExisting, TIncoming, TOptions> | boolean;\n};\n\nexport type StorageType = Record<string, any>;\n\nfunction argsFromFieldSpecifier(spec: FieldSpecifier) {\n  return spec.args !== void 0 ? spec.args :\n    spec.field ? argumentsObjectFromField(spec.field, spec.variables) : null;\n}\n\nexport interface FieldFunctionOptions<\n  TArgs = Record<string, any>,\n  TVars = Record<string, any>,\n> {\n  args: TArgs | null;\n\n  // The name of the field, equal to options.field.name.value when\n  // options.field is available. Useful if you reuse the same function for\n  // multiple fields, and you need to know which field you're currently\n  // processing. Always a string, even when options.field is null.\n  fieldName: string;\n\n  // The full field key used internally, including serialized key arguments.\n  storeFieldName: string;\n\n  // The FieldNode object used to read this field. Useful if you need to\n  // know about other attributes of the field, such as its directives. This\n  // option will be null when a string was passed to options.readField.\n  field: FieldNode | null;\n\n  variables?: TVars;\n\n  // Utilities for dealing with { __ref } objects.\n  isReference: typeof isReference;\n  toReference: ToReferenceFunction;\n\n  // A handy place to put field-specific data that you want to survive\n  // across multiple read function calls. Useful for field-level caching,\n  // if your read function does any expensive work.\n  storage: StorageType;\n\n  cache: InMemoryCache;\n\n  // Helper function for reading other fields within the current object.\n  // If a foreign object or reference is provided, the field will be read\n  // from that object instead of the current object, so this function can\n  // be used (together with isReference) to examine the cache outside the\n  // current object. If a FieldNode is passed instead of a string, and\n  // that FieldNode has arguments, the same options.variables will be used\n  // to compute the argument values. Note that this function will invoke\n  // custom read functions for other fields, if defined. Always returns\n  // immutable data (enforced with Object.freeze in development).\n  readField: ReadFieldFunction;\n\n  // Returns true for non-normalized StoreObjects and non-dangling\n  // References, indicating that readField(name, objOrRef) has a chance of\n  // working. Useful for filtering out dangling references from lists.\n  canRead: CanReadFunction;\n\n  // Instead of just merging objects with { ...existing, ...incoming }, this\n  // helper function can be used to merge objects in a way that respects any\n  // custom merge functions defined for their fields.\n  mergeObjects: MergeObjectsFunction;\n}\n\ntype MergeObjectsFunction = <T extends StoreObject | Reference>(\n  existing: T,\n  incoming: T,\n) => T;\n\nexport type FieldReadFunction<\n  TExisting = any,\n  TReadResult = TExisting,\n  TOptions extends FieldFunctionOptions = FieldFunctionOptions\n> = (\n  // When reading a field, one often needs to know about any existing\n  // value stored for that field. If the field is read before any value\n  // has been written to the cache, this existing parameter will be\n  // undefined, which makes it easy to use a default parameter expression\n  // to supply the initial value. This parameter is positional (rather\n  // than one of the named options) because that makes it possible for the\n  // developer to annotate it with a type, without also having to provide\n  // a whole new type for the options object.\n  existing: SafeReadonly<TExisting> | undefined,\n  options: TOptions,\n) => TReadResult | undefined;\n\nexport type FieldMergeFunction<\n  TExisting = any,\n  TIncoming = TExisting,\n  // Passing the whole FieldFunctionOptions makes the current definition\n  // independent from its implementation\n  TOptions extends FieldFunctionOptions = FieldFunctionOptions\n> = (\n  existing: SafeReadonly<TExisting> | undefined,\n  // The incoming parameter needs to be positional as well, for the same\n  // reasons discussed in FieldReadFunction above.\n  incoming: SafeReadonly<TIncoming>,\n  options: TOptions,\n) => SafeReadonly<TExisting>;\n\nconst nullKeyFieldsFn: KeyFieldsFunction = () => void 0;\nconst simpleKeyArgsFn: KeyArgsFunction = (_args, context) => context.fieldName;\n\n// These merge functions can be selected by specifying merge:true or\n// merge:false in a field policy.\nconst mergeTrueFn: FieldMergeFunction<any> =\n  (existing, incoming, { mergeObjects }) => mergeObjects(existing, incoming);\nconst mergeFalseFn: FieldMergeFunction<any> = (_, incoming) => incoming;\n\nexport type PossibleTypesMap = {\n  [supertype: string]: string[];\n};\n\nexport class Policies {\n  private typePolicies: {\n    [__typename: string]: {\n      keyFn?: KeyFieldsFunction;\n      merge?: FieldMergeFunction<any>;\n      fields: {\n        [fieldName: string]: {\n          keyFn?: KeyArgsFunction;\n          read?: FieldReadFunction<any>;\n          merge?: FieldMergeFunction<any>;\n        };\n      };\n    };\n  } = Object.create(null);\n\n  private toBeAdded: {\n    [__typename: string]: TypePolicy[];\n  } = Object.create(null);\n\n  // Map from subtype names to sets of supertype names. Note that this\n  // representation inverts the structure of possibleTypes (whose keys are\n  // supertypes and whose values are arrays of subtypes) because it tends\n  // to be much more efficient to search upwards than downwards.\n  private supertypeMap = new Map<string, Set<string>>();\n\n  // Any fuzzy subtypes specified by possibleTypes will be converted to\n  // RegExp objects and recorded here. Every key of this map can also be\n  // found in supertypeMap. In many cases this Map will be empty, which\n  // means no fuzzy subtype checking will happen in fragmentMatches.\n  private fuzzySubtypes = new Map<string, RegExp>();\n\n  public readonly cache: InMemoryCache;\n\n  public readonly rootIdsByTypename: Record<string, string> = Object.create(null);\n  public readonly rootTypenamesById: Record<string, string> = Object.create(null);\n\n  public readonly usingPossibleTypes = false;\n\n  constructor(private config: {\n    cache: InMemoryCache;\n    dataIdFromObject?: KeyFieldsFunction;\n    possibleTypes?: PossibleTypesMap;\n    typePolicies?: TypePolicies;\n  }) {\n    this.config = {\n      dataIdFromObject: defaultDataIdFromObject,\n      ...config,\n    };\n\n    this.cache = this.config.cache;\n\n    this.setRootTypename(\"Query\");\n    this.setRootTypename(\"Mutation\");\n    this.setRootTypename(\"Subscription\");\n\n    if (config.possibleTypes) {\n      this.addPossibleTypes(config.possibleTypes);\n    }\n\n    if (config.typePolicies) {\n      this.addTypePolicies(config.typePolicies);\n    }\n  }\n\n  public identify(\n    object: StoreObject,\n    selectionSet?: SelectionSetNode,\n    fragmentMap?: FragmentMap,\n  ): [string?, StoreObject?] {\n    // TODO Use an AliasMap here?\n    const typename = selectionSet && fragmentMap\n      ? getTypenameFromResult(object, selectionSet, fragmentMap)\n      : object.__typename;\n\n    // It should be possible to write root Query fields with\n    // writeFragment, using { __typename: \"Query\", ... } as the data, but\n    // it does not make sense to allow the same identification behavior\n    // for the Mutation and Subscription types, since application code\n    // should never be writing directly to (or reading directly from)\n    // those root objects.\n    if (typename === this.rootTypenamesById.ROOT_QUERY) {\n      return [\"ROOT_QUERY\"];\n    }\n\n    const context: KeyFieldsContext = {\n      typename,\n      selectionSet,\n      fragmentMap,\n    };\n\n    let id: KeyFieldsResult;\n\n    const policy = typename && this.getTypePolicy(typename);\n    let keyFn = policy && policy.keyFn || this.config.dataIdFromObject;\n    while (keyFn) {\n      const specifierOrId = keyFn(object, context);\n      if (Array.isArray(specifierOrId)) {\n        keyFn = keyFieldsFnFromSpecifier(specifierOrId);\n      } else {\n        id = specifierOrId;\n        break;\n      }\n    }\n\n    id = id ? String(id) : void 0;\n    return context.keyObject ? [id, context.keyObject] : [id];\n  }\n\n  public addTypePolicies(typePolicies: TypePolicies) {\n    Object.keys(typePolicies).forEach(typename => {\n      const {\n        queryType,\n        mutationType,\n        subscriptionType,\n        ...incoming\n      } = typePolicies[typename];\n\n      // Though {query,mutation,subscription}Type configurations are rare,\n      // it's important to call setRootTypename as early as possible,\n      // since these configurations should apply consistently for the\n      // entire lifetime of the cache. Also, since only one __typename can\n      // qualify as one of these root types, these three properties cannot\n      // be inherited, unlike the rest of the incoming properties. That\n      // restriction is convenient, because the purpose of this.toBeAdded\n      // is to delay the processing of type/field policies until the first\n      // time they're used, allowing policies to be added in any order as\n      // long as all relevant policies (including policies for supertypes)\n      // have been added by the time a given policy is used for the first\n      // time. In other words, since inheritance doesn't matter for these\n      // properties, there's also no need to delay their processing using\n      // the this.toBeAdded queue.\n      if (queryType) this.setRootTypename(\"Query\", typename);\n      if (mutationType) this.setRootTypename(\"Mutation\", typename);\n      if (subscriptionType) this.setRootTypename(\"Subscription\", typename);\n\n      if (hasOwn.call(this.toBeAdded, typename)) {\n        this.toBeAdded[typename].push(incoming);\n      } else {\n        this.toBeAdded[typename] = [incoming];\n      }\n    });\n  }\n\n  private updateTypePolicy(typename: string, incoming: TypePolicy) {\n    const existing = this.getTypePolicy(typename);\n    const { keyFields, fields } = incoming;\n\n    function setMerge(\n      existing: { merge?: FieldMergeFunction | boolean; },\n      merge?: FieldMergeFunction | boolean,\n    ) {\n      existing.merge =\n        typeof merge === \"function\" ? merge :\n        // Pass merge:true as a shorthand for a merge implementation\n        // that returns options.mergeObjects(existing, incoming).\n        merge === true ? mergeTrueFn :\n        // Pass merge:false to make incoming always replace existing\n        // without any warnings about data clobbering.\n        merge === false ? mergeFalseFn :\n        existing.merge;\n    }\n\n    // Type policies can define merge functions, as an alternative to\n    // using field policies to merge child objects.\n    setMerge(existing, incoming.merge);\n\n    existing.keyFn =\n      // Pass false to disable normalization for this typename.\n      keyFields === false ? nullKeyFieldsFn :\n      // Pass an array of strings to use those fields to compute a\n      // composite ID for objects of this typename.\n      Array.isArray(keyFields) ? keyFieldsFnFromSpecifier(keyFields) :\n      // Pass a function to take full control over identification.\n      typeof keyFields === \"function\" ? keyFields :\n      // Leave existing.keyFn unchanged if above cases fail.\n      existing.keyFn;\n\n    if (fields) {\n      Object.keys(fields).forEach(fieldName => {\n        const existing = this.getFieldPolicy(typename, fieldName, true)!;\n        const incoming = fields[fieldName];\n\n        if (typeof incoming === \"function\") {\n          existing.read = incoming;\n        } else {\n          const { keyArgs, read, merge } = incoming;\n\n          existing.keyFn =\n            // Pass false to disable argument-based differentiation of\n            // field identities.\n            keyArgs === false ? simpleKeyArgsFn :\n            // Pass an array of strings to use named arguments to\n            // compute a composite identity for the field.\n            Array.isArray(keyArgs) ? keyArgsFnFromSpecifier(keyArgs) :\n            // Pass a function to take full control over field identity.\n            typeof keyArgs === \"function\" ? keyArgs :\n            // Leave existing.keyFn unchanged if above cases fail.\n            existing.keyFn;\n\n          if (typeof read === \"function\") {\n            existing.read = read;\n          }\n\n          setMerge(existing, merge);\n        }\n\n        if (existing.read && existing.merge) {\n          // If we have both a read and a merge function, assume\n          // keyArgs:false, because read and merge together can take\n          // responsibility for interpreting arguments in and out. This\n          // default assumption can always be overridden by specifying\n          // keyArgs explicitly in the FieldPolicy.\n          existing.keyFn = existing.keyFn || simpleKeyArgsFn;\n        }\n      });\n    }\n  }\n\n  private setRootTypename(\n    which: \"Query\" | \"Mutation\" | \"Subscription\",\n    typename: string = which,\n  ) {\n    const rootId = \"ROOT_\" + which.toUpperCase();\n    const old = this.rootTypenamesById[rootId];\n    if (typename !== old) {\n      invariant(!old || old === which, `Cannot change root ${which} __typename more than once`);\n      // First, delete any old __typename associated with this rootId from\n      // rootIdsByTypename.\n      if (old) delete this.rootIdsByTypename[old];\n      // Now make this the only __typename that maps to this rootId.\n      this.rootIdsByTypename[typename] = rootId;\n      // Finally, update the __typename associated with this rootId.\n      this.rootTypenamesById[rootId] = typename;\n    }\n  }\n\n  public addPossibleTypes(possibleTypes: PossibleTypesMap) {\n    (this.usingPossibleTypes as boolean) = true;\n    Object.keys(possibleTypes).forEach(supertype => {\n      // Make sure all types have an entry in this.supertypeMap, even if\n      // their supertype set is empty, so we can return false immediately\n      // from policies.fragmentMatches for unknown supertypes.\n      this.getSupertypeSet(supertype, true);\n\n      possibleTypes[supertype].forEach(subtype => {\n        this.getSupertypeSet(subtype, true)!.add(supertype);\n        const match = subtype.match(TypeOrFieldNameRegExp);\n        if (!match || match[0] !== subtype) {\n          // TODO Don't interpret just any invalid typename as a RegExp.\n          this.fuzzySubtypes.set(subtype, new RegExp(subtype));\n        }\n      });\n    });\n  }\n\n  private getTypePolicy(typename: string): Policies[\"typePolicies\"][string] {\n    if (!hasOwn.call(this.typePolicies, typename)) {\n      const policy: Policies[\"typePolicies\"][string] =\n        this.typePolicies[typename] = Object.create(null);\n      policy.fields = Object.create(null);\n\n      // When the TypePolicy for typename is first accessed, instead of\n      // starting with an empty policy object, inherit any properties or\n      // fields from the type policies of the supertypes of typename.\n      //\n      // Any properties or fields defined explicitly within the TypePolicy\n      // for typename will take precedence, and if there are multiple\n      // supertypes, the properties of policies whose types were added\n      // later via addPossibleTypes will take precedence over those of\n      // earlier supertypes. TODO Perhaps we should warn about these\n      // conflicts in development, and recommend defining the property\n      // explicitly in the subtype policy?\n      //\n      // Field policy inheritance is atomic/shallow: you can't inherit a\n      // field policy and then override just its read function, since read\n      // and merge functions often need to cooperate, so changing only one\n      // of them would be a recipe for inconsistency.\n      //\n      // Once the TypePolicy for typename has been accessed, its\n      // properties can still be updated directly using addTypePolicies,\n      // but future changes to supertype policies will not be reflected in\n      // this policy, because this code runs at most once per typename.\n      const supertypes = this.supertypeMap.get(typename);\n      if (supertypes && supertypes.size) {\n        supertypes.forEach(supertype => {\n          const { fields, ...rest } = this.getTypePolicy(supertype);\n          Object.assign(policy, rest);\n          Object.assign(policy.fields, fields);\n        });\n      }\n    }\n\n    const inbox = this.toBeAdded[typename];\n    if (inbox && inbox.length) {\n      // Merge the pending policies into this.typePolicies, in the order they\n      // were originally passed to addTypePolicy.\n      inbox.splice(0).forEach(policy => {\n        this.updateTypePolicy(typename, policy);\n      });\n    }\n\n    return this.typePolicies[typename];\n  }\n\n  private getFieldPolicy(\n    typename: string | undefined,\n    fieldName: string,\n    createIfMissing: boolean,\n  ): {\n    keyFn?: KeyArgsFunction;\n    read?: FieldReadFunction<any>;\n    merge?: FieldMergeFunction<any>;\n  } | undefined {\n    if (typename) {\n      const fieldPolicies = this.getTypePolicy(typename).fields;\n      return fieldPolicies[fieldName] || (\n        createIfMissing && (fieldPolicies[fieldName] = Object.create(null)));\n    }\n  }\n\n  private getSupertypeSet(\n    subtype: string,\n    createIfMissing: boolean,\n  ): Set<string> | undefined {\n    let supertypeSet = this.supertypeMap.get(subtype);\n    if (!supertypeSet && createIfMissing) {\n      this.supertypeMap.set(subtype, supertypeSet = new Set<string>());\n    }\n    return supertypeSet;\n  }\n\n  public fragmentMatches(\n    fragment: InlineFragmentNode | FragmentDefinitionNode,\n    typename: string | undefined,\n    result?: Record<string, any>,\n    variables?: Record<string, any>,\n  ): boolean {\n    if (!fragment.typeCondition) return true;\n\n    // If the fragment has a type condition but the object we're matching\n    // against does not have a __typename, the fragment cannot match.\n    if (!typename) return false;\n\n    const supertype = fragment.typeCondition.name.value;\n    // Common case: fragment type condition and __typename are the same.\n    if (typename === supertype) return true;\n\n    if (this.usingPossibleTypes &&\n        this.supertypeMap.has(supertype)) {\n      const typenameSupertypeSet = this.getSupertypeSet(typename, true)!;\n      const workQueue = [typenameSupertypeSet];\n      const maybeEnqueue = (subtype: string) => {\n        const supertypeSet = this.getSupertypeSet(subtype, false);\n        if (supertypeSet &&\n            supertypeSet.size &&\n            workQueue.indexOf(supertypeSet) < 0) {\n          workQueue.push(supertypeSet);\n        }\n      };\n\n      // We need to check fuzzy subtypes only if we encountered fuzzy\n      // subtype strings in addPossibleTypes, and only while writing to\n      // the cache, since that's when selectionSetMatchesResult gives a\n      // strong signal of fragment matching. The StoreReader class calls\n      // policies.fragmentMatches without passing a result object, so\n      // needToCheckFuzzySubtypes is always false while reading.\n      let needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);\n      let checkingFuzzySubtypes = false;\n\n      // It's important to keep evaluating workQueue.length each time through\n      // the loop, because the queue can grow while we're iterating over it.\n      for (let i = 0; i < workQueue.length; ++i) {\n        const supertypeSet = workQueue[i];\n\n        if (supertypeSet.has(supertype)) {\n          if (!typenameSupertypeSet.has(supertype)) {\n            if (checkingFuzzySubtypes) {\n              invariant.warn(`Inferring subtype ${typename} of supertype ${supertype}`);\n            }\n            // Record positive results for faster future lookup.\n            // Unfortunately, we cannot safely cache negative results,\n            // because new possibleTypes data could always be added to the\n            // Policies class.\n            typenameSupertypeSet.add(supertype);\n          }\n          return true;\n        }\n\n        supertypeSet.forEach(maybeEnqueue);\n\n        if (needToCheckFuzzySubtypes &&\n            // Start checking fuzzy subtypes only after exhausting all\n            // non-fuzzy subtypes (after the final iteration of the loop).\n            i === workQueue.length - 1 &&\n            // We could wait to compare fragment.selectionSet to result\n            // after we verify the supertype, but this check is often less\n            // expensive than that search, and we will have to do the\n            // comparison anyway whenever we find a potential match.\n            selectionSetMatchesResult(fragment.selectionSet, result!, variables)) {\n          // We don't always need to check fuzzy subtypes (if no result\n          // was provided, or !this.fuzzySubtypes.size), but, when we do,\n          // we only want to check them once.\n          needToCheckFuzzySubtypes = false;\n          checkingFuzzySubtypes = true;\n\n          // If we find any fuzzy subtypes that match typename, extend the\n          // workQueue to search through the supertypes of those fuzzy\n          // subtypes. Otherwise the for-loop will terminate and we'll\n          // return false below.\n          this.fuzzySubtypes.forEach((regExp, fuzzyString) => {\n            const match = typename.match(regExp);\n            if (match && match[0] === typename) {\n              maybeEnqueue(fuzzyString);\n            }\n          });\n        }\n      }\n    }\n\n    return false;\n  }\n\n  public hasKeyArgs(typename: string | undefined, fieldName: string) {\n    const policy = this.getFieldPolicy(typename, fieldName, false);\n    return !!(policy && policy.keyFn);\n  }\n\n  public getStoreFieldName(fieldSpec: FieldSpecifier): string {\n    const { typename, fieldName } = fieldSpec;\n    const policy = this.getFieldPolicy(typename, fieldName, false);\n    let storeFieldName: KeyArgsResult;\n\n    let keyFn = policy && policy.keyFn;\n    if (keyFn && typename) {\n      const context: Parameters<KeyArgsFunction>[1] = {\n        typename,\n        fieldName,\n        field: fieldSpec.field || null,\n        variables: fieldSpec.variables,\n      };\n      const args = argsFromFieldSpecifier(fieldSpec);\n      while (keyFn) {\n        const specifierOrString = keyFn(args, context);\n        if (Array.isArray(specifierOrString)) {\n          keyFn = keyArgsFnFromSpecifier(specifierOrString);\n        } else {\n          // If the custom keyFn returns a falsy value, fall back to\n          // fieldName instead.\n          storeFieldName = specifierOrString || fieldName;\n          break;\n        }\n      }\n    }\n\n    if (storeFieldName === void 0) {\n      storeFieldName = fieldSpec.field\n        ? storeKeyNameFromField(fieldSpec.field, fieldSpec.variables)\n        : getStoreKeyName(fieldName, argsFromFieldSpecifier(fieldSpec));\n    }\n\n    // Returning false from a keyArgs function is like configuring\n    // keyArgs: false, but more dynamic.\n    if (storeFieldName === false) {\n      return fieldName;\n    }\n\n    // Make sure custom field names start with the actual field.name.value\n    // of the field, so we can always figure out which properties of a\n    // StoreObject correspond to which original field names.\n    return fieldName === fieldNameFromStoreName(storeFieldName)\n      ? storeFieldName\n      : fieldName + \":\" + storeFieldName;\n  }\n\n  public readField<V = StoreValue>(\n    options: ReadFieldOptions,\n    context: ReadMergeModifyContext,\n  ): SafeReadonly<V> | undefined {\n    const objectOrReference = options.from;\n    if (!objectOrReference) return;\n\n    const nameOrField = options.field || options.fieldName;\n    if (!nameOrField) return;\n\n    if (options.typename === void 0) {\n      const typename = context.store.getFieldValue<string>(objectOrReference, \"__typename\");\n      if (typename) options.typename = typename;\n    }\n\n    const storeFieldName = this.getStoreFieldName(options);\n    const fieldName = fieldNameFromStoreName(storeFieldName);\n    const existing = context.store.getFieldValue<V>(objectOrReference, storeFieldName);\n    const policy = this.getFieldPolicy(options.typename, fieldName, false);\n    const read = policy && policy.read;\n\n    if (read) {\n      const readOptions = makeFieldFunctionOptions(\n        this,\n        objectOrReference,\n        options,\n        context,\n        context.store.getStorage(\n          isReference(objectOrReference)\n            ? objectOrReference.__ref\n            : objectOrReference,\n          storeFieldName,\n        ),\n      );\n\n      // Call read(existing, readOptions) with cacheSlot holding this.cache.\n      return cacheSlot.withValue(\n        this.cache,\n        read,\n        [existing, readOptions],\n      ) as SafeReadonly<V>;\n    }\n\n    return existing;\n  }\n\n  public getMergeFunction(\n    parentTypename: string | undefined,\n    fieldName: string,\n    childTypename: string | undefined,\n  ): FieldMergeFunction | undefined {\n    let policy:\n      | Policies[\"typePolicies\"][string]\n      | Policies[\"typePolicies\"][string][\"fields\"][string]\n      | undefined =\n      this.getFieldPolicy(parentTypename, fieldName, false);\n    let merge = policy && policy.merge;\n    if (!merge && childTypename) {\n      policy = this.getTypePolicy(childTypename);\n      merge = policy && policy.merge;\n    }\n    return merge;\n  }\n\n  public runMergeFunction(\n    existing: StoreValue,\n    incoming: StoreValue,\n    { field, typename, merge }: MergeInfo,\n    context: WriteContext,\n    storage?: StorageType,\n  ) {\n    if (merge === mergeTrueFn) {\n      // Instead of going to the trouble of creating a full\n      // FieldFunctionOptions object and calling mergeTrueFn, we can\n      // simply call mergeObjects, as mergeTrueFn would.\n      return makeMergeObjectsFunction(\n        context.store,\n      )(existing as StoreObject,\n        incoming as StoreObject);\n    }\n\n    if (merge === mergeFalseFn) {\n      // Likewise for mergeFalseFn, whose implementation is even simpler.\n      return incoming;\n    }\n\n    // If cache.writeQuery or cache.writeFragment was called with\n    // options.overwrite set to true, we still call merge functions, but\n    // the existing data is always undefined, so the merge function will\n    // not attempt to combine the incoming data with the existing data.\n    if (context.overwrite) {\n      existing = void 0;\n    }\n\n    return merge(existing, incoming, makeFieldFunctionOptions(\n      this,\n      // Unlike options.readField for read functions, we do not fall\n      // back to the current object if no foreignObjOrRef is provided,\n      // because it's not clear what the current object should be for\n      // merge functions: the (possibly undefined) existing object, or\n      // the incoming object? If you think your merge function needs\n      // to read sibling fields in order to produce a new value for\n      // the current field, you might want to rethink your strategy,\n      // because that's a recipe for making merge behavior sensitive\n      // to the order in which fields are written into the cache.\n      // However, readField(name, ref) is useful for merge functions\n      // that need to deduplicate child objects and references.\n      void 0,\n      { typename,\n        fieldName: field.name.value,\n        field,\n        variables: context.variables },\n      context,\n      storage || Object.create(null),\n    ));\n  }\n}\n\nfunction makeFieldFunctionOptions(\n  policies: Policies,\n  objectOrReference: StoreObject | Reference | undefined,\n  fieldSpec: FieldSpecifier,\n  context: ReadMergeModifyContext,\n  storage: StorageType,\n): FieldFunctionOptions {\n  const storeFieldName = policies.getStoreFieldName(fieldSpec);\n  const fieldName = fieldNameFromStoreName(storeFieldName);\n  const variables = fieldSpec.variables || context.variables;\n  const { toReference, canRead } = context.store;\n\n  return {\n    args: argsFromFieldSpecifier(fieldSpec),\n    field: fieldSpec.field || null,\n    fieldName,\n    storeFieldName,\n    variables,\n    isReference,\n    toReference,\n    storage,\n    cache: policies.cache,\n    canRead,\n\n    readField<T>(\n      fieldNameOrOptions: string | ReadFieldOptions,\n      from?: StoreObject | Reference,\n    ) {\n      let options: ReadFieldOptions;\n      if (typeof fieldNameOrOptions === \"string\") {\n        options = {\n          fieldName: fieldNameOrOptions,\n          // Default to objectOrReference only when no second argument was\n          // passed for the from parameter, not when undefined is explicitly\n          // passed as the second argument.\n          from: arguments.length > 1 ? from : objectOrReference,\n        };\n      } else if (isNonNullObject(fieldNameOrOptions)) {\n        options = { ...fieldNameOrOptions };\n        // Default to objectOrReference only when fieldNameOrOptions.from is\n        // actually omitted, rather than just undefined.\n        if (!hasOwn.call(fieldNameOrOptions, \"from\")) {\n          options.from = objectOrReference;\n        }\n      } else {\n        invariant.warn(`Unexpected readField arguments: ${\n          stringifyForDisplay(Array.from(arguments))\n        }`);\n        // The readField helper function returns undefined for any missing\n        // fields, so it should also return undefined if the arguments were not\n        // of a type we expected.\n        return;\n      }\n\n      if (__DEV__ && options.from === void 0) {\n        invariant.warn(`Undefined 'from' passed to readField with arguments ${\n          stringifyForDisplay(Array.from(arguments))\n        }`);\n      }\n\n      if (void 0 === options.variables) {\n        options.variables = variables;\n      }\n\n      return policies.readField<T>(options, context);\n    },\n\n    mergeObjects: makeMergeObjectsFunction(context.store),\n  };\n}\n\nfunction makeMergeObjectsFunction(\n  store: NormalizedCache,\n): MergeObjectsFunction {\n  return function mergeObjects(existing, incoming) {\n    if (Array.isArray(existing) || Array.isArray(incoming)) {\n      throw new InvariantError(\"Cannot automatically merge arrays\");\n    }\n\n    // These dynamic checks are necessary because the parameters of a\n    // custom merge function can easily have the any type, so the type\n    // system cannot always enforce the StoreObject | Reference parameter\n    // types of options.mergeObjects.\n    if (isNonNullObject(existing) &&\n        isNonNullObject(incoming)) {\n      const eType = store.getFieldValue(existing, \"__typename\");\n      const iType = store.getFieldValue(incoming, \"__typename\");\n      const typesDiffer = eType && iType && eType !== iType;\n\n      if (typesDiffer) {\n        return incoming;\n      }\n\n      if (isReference(existing) &&\n          storeValueIsStoreObject(incoming)) {\n        // Update the normalized EntityStore for the entity identified by\n        // existing.__ref, preferring/overwriting any fields contributed by the\n        // newer incoming StoreObject.\n        store.merge(existing.__ref, incoming);\n        return existing;\n      }\n\n      if (storeValueIsStoreObject(existing) &&\n          isReference(incoming)) {\n        // Update the normalized EntityStore for the entity identified by\n        // incoming.__ref, taking fields from the older existing object only if\n        // those fields are not already present in the newer StoreObject\n        // identified by incoming.__ref.\n        store.merge(existing, incoming.__ref);\n        return incoming;\n      }\n\n      if (storeValueIsStoreObject(existing) &&\n          storeValueIsStoreObject(incoming)) {\n        return { ...existing, ...incoming };\n      }\n    }\n\n    return incoming;\n  };\n}\n\nfunction keyArgsFnFromSpecifier(\n  specifier: KeySpecifier,\n): KeyArgsFunction {\n  return (args, context) => {\n    return args ? `${context.fieldName}:${\n      JSON.stringify(computeKeyObject(args, specifier, false))\n    }` : context.fieldName;\n  };\n}\n\nfunction keyFieldsFnFromSpecifier(\n  specifier: KeySpecifier,\n): KeyFieldsFunction {\n  const trie = new Trie<{\n    aliasMap?: AliasMap;\n  }>(canUseWeakMap);\n\n  return (object, context) => {\n    let aliasMap: AliasMap | undefined;\n    if (context.selectionSet && context.fragmentMap) {\n      const info = trie.lookupArray([\n        context.selectionSet,\n        context.fragmentMap,\n      ]);\n      aliasMap = info.aliasMap || (\n        info.aliasMap = makeAliasMap(context.selectionSet, context.fragmentMap)\n      );\n    }\n\n    const keyObject = context.keyObject =\n      computeKeyObject(object, specifier, true, aliasMap);\n\n    return `${context.typename}:${JSON.stringify(keyObject)}`;\n  };\n}\n\ntype AliasMap = {\n  // Map from store key to corresponding response key. Undefined when there are\n  // no aliased fields in this selection set.\n  aliases?: Record<string, string>;\n  // Map from store key to AliasMap correponding to a child selection set.\n  // Undefined when there are no child selection sets.\n  subsets?: Record<string, AliasMap>;\n};\n\nfunction makeAliasMap(\n  selectionSet: SelectionSetNode,\n  fragmentMap: FragmentMap,\n): AliasMap {\n  let map: AliasMap = Object.create(null);\n  // TODO Cache this work, perhaps by storing selectionSet._aliasMap?\n  const workQueue = new Set([selectionSet]);\n  workQueue.forEach(selectionSet => {\n    selectionSet.selections.forEach(selection => {\n      if (isField(selection)) {\n        if (selection.alias) {\n          const responseKey = selection.alias.value;\n          const storeKey = selection.name.value;\n          if (storeKey !== responseKey) {\n            const aliases = map.aliases || (map.aliases = Object.create(null));\n            aliases[storeKey] = responseKey;\n          }\n        }\n        if (selection.selectionSet) {\n          const subsets = map.subsets || (map.subsets = Object.create(null));\n          subsets[selection.name.value] =\n            makeAliasMap(selection.selectionSet, fragmentMap);\n        }\n      } else {\n        const fragment = getFragmentFromSelection(selection, fragmentMap);\n        if (fragment) {\n          workQueue.add(fragment.selectionSet);\n        }\n      }\n    });\n  });\n  return map;\n}\n\nfunction computeKeyObject(\n  response: Record<string, any>,\n  specifier: KeySpecifier,\n  strict: boolean,\n  aliasMap?: AliasMap,\n): Record<string, any> {\n  // The order of adding properties to keyObj affects its JSON serialization,\n  // so we are careful to build keyObj in the order of keys given in\n  // specifier.\n  const keyObj = Object.create(null);\n\n  // The lastResponseKey variable tracks keys as seen in actual GraphQL response\n  // objects, potentially affected by aliasing. The lastActualKey variable\n  // tracks the corresponding key after removing aliases.\n  let lastResponseKey: string | undefined;\n  let lastActualKey: string | undefined;\n\n  specifier.forEach(s => {\n    if (Array.isArray(s)) {\n      if (typeof lastActualKey === \"string\" &&\n          typeof lastResponseKey === \"string\") {\n        const subsets = aliasMap && aliasMap.subsets;\n        const subset = subsets && subsets[lastActualKey];\n        keyObj[lastActualKey] =\n          computeKeyObject(response[lastResponseKey], s, strict, subset);\n      }\n    } else {\n      const aliases = aliasMap && aliasMap.aliases;\n      const responseName = aliases && aliases[s] || s;\n      if (hasOwn.call(response, responseName)) {\n        keyObj[lastActualKey = s] = response[lastResponseKey = responseName];\n      } else {\n        invariant(!strict, `Missing field '${responseName}' while computing key fields`);\n        lastResponseKey = lastActualKey = void 0;\n      }\n    }\n  });\n  return keyObj;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}