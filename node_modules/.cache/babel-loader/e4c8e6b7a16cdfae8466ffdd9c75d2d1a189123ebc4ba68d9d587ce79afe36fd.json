{"ast":null,"code":"import { useRef } from 'react';\nimport { equal } from '@wry/equality';\nexport function useDeepMemo(memoFn, key) {\n  var ref = useRef();\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = {\n      key: key,\n      value: memoFn()\n    };\n  }\n  return ref.current.value;\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,SAASC,KAAK,QAAQ,eAAe;AASrC,OAAM,SAAUC,WAAW,CACzBC,MAAoB,EACpBC,GAAS;EAET,IAAMC,GAAG,GAAGL,MAAM,EAAgC;EAElD,IAAI,CAACK,GAAG,CAACC,OAAO,IAAI,CAACL,KAAK,CAACG,GAAG,EAAEC,GAAG,CAACC,OAAO,CAACF,GAAG,CAAC,EAAE;IAChDC,GAAG,CAACC,OAAO,GAAG;MAAEF,GAAG;MAAEG,KAAK,EAAEJ,MAAM;IAAE,CAAE;;EAGxC,OAAOE,GAAG,CAACC,OAAO,CAACC,KAAK;AAC1B","names":["useRef","equal","useDeepMemo","memoFn","key","ref","current","value"],"sources":["C:\\Users\\Hernan\\Desktop\\Proyectos\\login\\node_modules\\@apollo\\src\\react\\hooks\\utils\\useDeepMemo.ts"],"sourcesContent":["import { useRef } from 'react';\nimport { equal } from '@wry/equality';\n\n/**\n * Memoize a result using deep equality. This hook has two advantages over\n * React.useMemo: it uses deep equality to compare memo keys, and it guarantees\n * that the memo function will only be called if the keys are unequal.\n * React.useMemo cannot be relied on to do this, since it is only a performance\n * optimization (see https://reactjs.org/docs/hooks-reference.html#usememo).\n */\nexport function useDeepMemo<TKey, TValue>(\n  memoFn: () => TValue,\n  key: TKey\n): TValue {\n  const ref = useRef<{ key: TKey; value: TValue }>();\n\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = { key, value: memoFn() };\n  }\n\n  return ref.current.value;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}