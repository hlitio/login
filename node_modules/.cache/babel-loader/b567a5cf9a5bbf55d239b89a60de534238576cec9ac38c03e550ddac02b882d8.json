{"ast":null,"code":"import { __assign } from \"tslib\";\nimport \"../../utilities/globals/index.js\";\nimport { useContext, useState, useRef, useEffect, useReducer } from 'react';\nimport { SubscriptionData } from \"../data/index.js\";\nimport { getApolloContext } from \"../context/index.js\";\nimport { useAfterFastRefresh } from \"./utils/useAfterFastRefresh.js\";\nexport function useSubscription(subscription, options) {\n  var _a = useReducer(function (x) {\n      return x + 1;\n    }, 0),\n    forceUpdate = _a[1];\n  var context = useContext(getApolloContext());\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    subscription: subscription\n  }) : {\n    subscription: subscription\n  };\n  var _b = useState({\n      loading: !updatedOptions.skip,\n      error: void 0,\n      data: void 0\n    }),\n    result = _b[0],\n    setResult = _b[1];\n  var subscriptionDataRef = useRef();\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData({\n        options: updatedOptions,\n        context: context,\n        setResult: setResult\n      });\n    }\n    return subscriptionDataRef.current;\n  }\n  var subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n  if (__DEV__) {\n    useAfterFastRefresh(forceUpdate);\n  }\n  useEffect(function () {\n    return subscriptionData.afterExecute();\n  });\n  useEffect(function () {\n    return function () {\n      subscriptionData.cleanup();\n      subscriptionDataRef.current = void 0;\n    };\n  }, []);\n  return subscriptionData.execute(result);\n}","map":{"version":3,"mappings":";AAAA,OAAO,kCAA0B;AAEjC,SAASA,UAAU,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAK3E,SAASC,gBAAgB,QAAQ,kBAAU;AAE3C,SAASC,gBAAgB,QAAQ,qBAAa;AAC9C,SAASC,mBAAmB,QAAQ,gCAA8B;AAElE,OAAM,SAAUC,eAAe,CAC7BC,YAAiE,EACjEC,OAAoD;EAE9C,SAAkBN,UAAU,CAAC,WAAC;MAAI,QAAC,GAAG,CAAC;IAAL,CAAK,EAAE,CAAC,CAAC;IAAxCO,WAAW,QAA6B;EACjD,IAAMC,OAAO,GAAGZ,UAAU,CAACM,gBAAgB,EAAE,CAAC;EAC9C,IAAMO,cAAc,GAAGH,OAAO,GAC3BI,sBAAMJ,OAAO;IAAED,YAAY;EAAA,KAC1B;IAAEA,YAAY;EAAA,CAAE;EACd,SAAsBR,QAAQ,CAAC;MACnCc,OAAO,EAAE,CAACF,cAAc,CAACG,IAAI;MAC7BC,KAAK,EAAE,KAAK,CAAC;MACbC,IAAI,EAAE,KAAK;KACZ,CAAC;IAJKC,MAAM;IAAEC,SAAS,QAItB;EAEF,IAAMC,mBAAmB,GAAGnB,MAAM,EAAuC;EACzE,SAASoB,sBAAsB;IAC7B,IAAI,CAACD,mBAAmB,CAACE,OAAO,EAAE;MAChCF,mBAAmB,CAACE,OAAO,GAAG,IAAIlB,gBAAgB,CAAoB;QACpEK,OAAO,EAAEG,cAAc;QACvBD,OAAO;QACPQ,SAAS;OACV,CAAC;;IAEJ,OAAOC,mBAAmB,CAACE,OAAO;EACpC;EAEA,IAAMC,gBAAgB,GAAGF,sBAAsB,EAAE;EACjDE,gBAAgB,CAACC,UAAU,CAACZ,cAAc,EAAE,IAAI,CAAC;EACjDW,gBAAgB,CAACZ,OAAO,GAAGA,OAAO;EAElC,IAAIc,OAAO,EAAE;IAEXnB,mBAAmB,CAACI,WAAW,CAAC;;EAGlCR,SAAS,CAAC;IAAM,uBAAgB,CAACwB,YAAY,EAAE;EAA/B,CAA+B,CAAC;EAChDxB,SAAS,CAAC;IACR,OAAO;MACLqB,gBAAgB,CAACI,OAAO,EAAE;MAC1BP,mBAAmB,CAACE,OAAO,GAAG,KAAK,CAAC;IACtC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOC,gBAAgB,CAACK,OAAO,CAACV,MAAM,CAAC;AACzC","names":["useContext","useState","useRef","useEffect","useReducer","SubscriptionData","getApolloContext","useAfterFastRefresh","useSubscription","subscription","options","forceUpdate","context","updatedOptions","__assign","loading","skip","error","data","result","setResult","subscriptionDataRef","getSubscriptionDataRef","current","subscriptionData","setOptions","__DEV__","afterExecute","cleanup","execute"],"sources":["C:\\Users\\Hernan\\Desktop\\Proyectos\\login\\node_modules\\@apollo\\src\\react\\hooks\\useSubscription.ts"],"sourcesContent":["import '../../utilities/globals';\n\nimport { useContext, useState, useRef, useEffect, useReducer } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core';\n\nimport { SubscriptionHookOptions } from '../types/types';\nimport { SubscriptionData } from '../data';\nimport { OperationVariables } from '../../core';\nimport { getApolloContext } from '../context';\nimport { useAfterFastRefresh } from './utils/useAfterFastRefresh';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: SubscriptionHookOptions<TData, TVariables>\n) {\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n  const context = useContext(getApolloContext());\n  const updatedOptions = options\n    ? { ...options, subscription }\n    : { subscription };\n  const [result, setResult] = useState({\n    loading: !updatedOptions.skip,\n    error: void 0,\n    data: void 0,\n  });\n\n  const subscriptionDataRef = useRef<SubscriptionData<TData, TVariables>>();\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        setResult\n      });\n    }\n    return subscriptionDataRef.current;\n  }\n\n  const subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n\n  if (__DEV__) {\n    // ensure we run an update after refreshing so that we can resubscribe\n    useAfterFastRefresh(forceUpdate);\n  }\n\n  useEffect(() => subscriptionData.afterExecute());\n  useEffect(() => {\n    return () => {\n      subscriptionData.cleanup();\n      subscriptionDataRef.current = void 0;\n    };\n  }, []);\n\n  return subscriptionData.execute(result);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}