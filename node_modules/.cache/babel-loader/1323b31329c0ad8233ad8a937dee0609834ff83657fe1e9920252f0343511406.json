{"ast":null,"code":"import { decode as decodeBase64URL, encodeBase64, decodeBase64 } from '../runtime/base64url.js';\nimport { fromSPKI as importPublic } from '../runtime/asn1.js';\nimport { fromPKCS8 as importPrivate } from '../runtime/asn1.js';\nimport asKeyObject from '../runtime/jwk_to_key.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport formatPEM from '../lib/format_pem.js';\nimport isObject from '../lib/is_object.js';\nfunction getElement(seq) {\n  let result = [];\n  let next = 0;\n  while (next < seq.length) {\n    let nextPart = parseElement(seq.subarray(next));\n    result.push(nextPart);\n    next += nextPart.byteLength;\n  }\n  return result;\n}\nfunction parseElement(bytes) {\n  let position = 0;\n  let tag = bytes[0] & 0x1f;\n  position++;\n  if (tag === 0x1f) {\n    tag = 0;\n    while (bytes[position] >= 0x80) {\n      tag = tag * 128 + bytes[position] - 0x80;\n      position++;\n    }\n    tag = tag * 128 + bytes[position] - 0x80;\n    position++;\n  }\n  let length = 0;\n  if (bytes[position] < 0x80) {\n    length = bytes[position];\n    position++;\n  } else if (length === 0x80) {\n    length = 0;\n    while (bytes[position + length] !== 0 || bytes[position + length + 1] !== 0) {\n      if (length > bytes.byteLength) {\n        throw new TypeError('invalid indefinite form length');\n      }\n      length++;\n    }\n    const byteLength = position + length + 2;\n    return {\n      byteLength,\n      contents: bytes.subarray(position, position + length),\n      raw: bytes.subarray(0, byteLength)\n    };\n  } else {\n    let numberOfDigits = bytes[position] & 0x7f;\n    position++;\n    length = 0;\n    for (let i = 0; i < numberOfDigits; i++) {\n      length = length * 256 + bytes[position];\n      position++;\n    }\n  }\n  const byteLength = position + length;\n  return {\n    byteLength,\n    contents: bytes.subarray(position, byteLength),\n    raw: bytes.subarray(0, byteLength)\n  };\n}\nfunction spkiFromX509(buf) {\n  const tbsCertificate = getElement(getElement(parseElement(buf).contents)[0].contents);\n  return encodeBase64(tbsCertificate[tbsCertificate[0].raw[0] === 0xa0 ? 6 : 5].raw);\n}\nfunction getSPKI(x509) {\n  const pem = x509.replace(/(?:-----(?:BEGIN|END) CERTIFICATE-----|\\s)/g, '');\n  const raw = decodeBase64(pem);\n  return formatPEM(spkiFromX509(raw), 'PUBLIC KEY');\n}\nexport async function importSPKI(spki, alg, options) {\n  if (typeof spki !== 'string' || spki.indexOf('-----BEGIN PUBLIC KEY-----') !== 0) {\n    throw new TypeError('\"spki\" must be SPKI formatted string');\n  }\n  return importPublic(spki, alg, options);\n}\nexport async function importX509(x509, alg, options) {\n  if (typeof x509 !== 'string' || x509.indexOf('-----BEGIN CERTIFICATE-----') !== 0) {\n    throw new TypeError('\"x509\" must be X.509 formatted string');\n  }\n  let spki;\n  try {\n    spki = getSPKI(x509);\n  } catch (cause) {\n    throw new TypeError('failed to parse the X.509 certificate', {\n      cause\n    });\n  }\n  return importPublic(spki, alg, options);\n}\nexport async function importPKCS8(pkcs8, alg, options) {\n  if (typeof pkcs8 !== 'string' || pkcs8.indexOf('-----BEGIN PRIVATE KEY-----') !== 0) {\n    throw new TypeError('\"pkcs8\" must be PKCS#8 formatted string');\n  }\n  return importPrivate(pkcs8, alg, options);\n}\nexport async function importJWK(jwk, alg, octAsKeyObject) {\n  var _a;\n  if (!isObject(jwk)) {\n    throw new TypeError('JWK must be an object');\n  }\n  alg || (alg = jwk.alg);\n  if (typeof alg !== 'string' || !alg) {\n    throw new TypeError('\"alg\" argument is required when \"jwk.alg\" is not present');\n  }\n  switch (jwk.kty) {\n    case 'oct':\n      if (typeof jwk.k !== 'string' || !jwk.k) {\n        throw new TypeError('missing \"k\" (Key Value) Parameter value');\n      }\n      octAsKeyObject !== null && octAsKeyObject !== void 0 ? octAsKeyObject : octAsKeyObject = jwk.ext !== true;\n      if (octAsKeyObject) {\n        return asKeyObject({\n          ...jwk,\n          alg,\n          ext: (_a = jwk.ext) !== null && _a !== void 0 ? _a : false\n        });\n      }\n      return decodeBase64URL(jwk.k);\n    case 'RSA':\n      if (jwk.oth !== undefined) {\n        throw new JOSENotSupported('RSA JWK \"oth\" (Other Primes Info) Parameter value is not supported');\n      }\n    case 'EC':\n    case 'OKP':\n      return asKeyObject({\n        ...jwk,\n        alg\n      });\n    default:\n      throw new JOSENotSupported('Unsupported \"kty\" (Key Type) Parameter value');\n  }\n}","map":{"version":3,"names":["decode","decodeBase64URL","encodeBase64","decodeBase64","fromSPKI","importPublic","fromPKCS8","importPrivate","asKeyObject","JOSENotSupported","formatPEM","isObject","getElement","seq","result","next","length","nextPart","parseElement","subarray","push","byteLength","bytes","position","tag","TypeError","contents","raw","numberOfDigits","i","spkiFromX509","buf","tbsCertificate","getSPKI","x509","pem","replace","importSPKI","spki","alg","options","indexOf","importX509","cause","importPKCS8","pkcs8","importJWK","jwk","octAsKeyObject","_a","kty","k","ext","oth","undefined"],"sources":["C:/Users/hherenu/Desktop/Proyectos/login/node_modules/jose/dist/browser/key/import.js"],"sourcesContent":["import { decode as decodeBase64URL, encodeBase64, decodeBase64 } from '../runtime/base64url.js';\r\nimport { fromSPKI as importPublic } from '../runtime/asn1.js';\r\nimport { fromPKCS8 as importPrivate } from '../runtime/asn1.js';\r\nimport asKeyObject from '../runtime/jwk_to_key.js';\r\nimport { JOSENotSupported } from '../util/errors.js';\r\nimport formatPEM from '../lib/format_pem.js';\r\nimport isObject from '../lib/is_object.js';\r\nfunction getElement(seq) {\r\n    let result = [];\r\n    let next = 0;\r\n    while (next < seq.length) {\r\n        let nextPart = parseElement(seq.subarray(next));\r\n        result.push(nextPart);\r\n        next += nextPart.byteLength;\r\n    }\r\n    return result;\r\n}\r\nfunction parseElement(bytes) {\r\n    let position = 0;\r\n    let tag = bytes[0] & 0x1f;\r\n    position++;\r\n    if (tag === 0x1f) {\r\n        tag = 0;\r\n        while (bytes[position] >= 0x80) {\r\n            tag = tag * 128 + bytes[position] - 0x80;\r\n            position++;\r\n        }\r\n        tag = tag * 128 + bytes[position] - 0x80;\r\n        position++;\r\n    }\r\n    let length = 0;\r\n    if (bytes[position] < 0x80) {\r\n        length = bytes[position];\r\n        position++;\r\n    }\r\n    else if (length === 0x80) {\r\n        length = 0;\r\n        while (bytes[position + length] !== 0 || bytes[position + length + 1] !== 0) {\r\n            if (length > bytes.byteLength) {\r\n                throw new TypeError('invalid indefinite form length');\r\n            }\r\n            length++;\r\n        }\r\n        const byteLength = position + length + 2;\r\n        return {\r\n            byteLength,\r\n            contents: bytes.subarray(position, position + length),\r\n            raw: bytes.subarray(0, byteLength),\r\n        };\r\n    }\r\n    else {\r\n        let numberOfDigits = bytes[position] & 0x7f;\r\n        position++;\r\n        length = 0;\r\n        for (let i = 0; i < numberOfDigits; i++) {\r\n            length = length * 256 + bytes[position];\r\n            position++;\r\n        }\r\n    }\r\n    const byteLength = position + length;\r\n    return {\r\n        byteLength,\r\n        contents: bytes.subarray(position, byteLength),\r\n        raw: bytes.subarray(0, byteLength),\r\n    };\r\n}\r\nfunction spkiFromX509(buf) {\r\n    const tbsCertificate = getElement(getElement(parseElement(buf).contents)[0].contents);\r\n    return encodeBase64(tbsCertificate[tbsCertificate[0].raw[0] === 0xa0 ? 6 : 5].raw);\r\n}\r\nfunction getSPKI(x509) {\r\n    const pem = x509.replace(/(?:-----(?:BEGIN|END) CERTIFICATE-----|\\s)/g, '');\r\n    const raw = decodeBase64(pem);\r\n    return formatPEM(spkiFromX509(raw), 'PUBLIC KEY');\r\n}\r\nexport async function importSPKI(spki, alg, options) {\r\n    if (typeof spki !== 'string' || spki.indexOf('-----BEGIN PUBLIC KEY-----') !== 0) {\r\n        throw new TypeError('\"spki\" must be SPKI formatted string');\r\n    }\r\n    return importPublic(spki, alg, options);\r\n}\r\nexport async function importX509(x509, alg, options) {\r\n    if (typeof x509 !== 'string' || x509.indexOf('-----BEGIN CERTIFICATE-----') !== 0) {\r\n        throw new TypeError('\"x509\" must be X.509 formatted string');\r\n    }\r\n    let spki;\r\n    try {\r\n        spki = getSPKI(x509);\r\n    }\r\n    catch (cause) {\r\n        throw new TypeError('failed to parse the X.509 certificate', { cause });\r\n    }\r\n    return importPublic(spki, alg, options);\r\n}\r\nexport async function importPKCS8(pkcs8, alg, options) {\r\n    if (typeof pkcs8 !== 'string' || pkcs8.indexOf('-----BEGIN PRIVATE KEY-----') !== 0) {\r\n        throw new TypeError('\"pkcs8\" must be PKCS#8 formatted string');\r\n    }\r\n    return importPrivate(pkcs8, alg, options);\r\n}\r\nexport async function importJWK(jwk, alg, octAsKeyObject) {\r\n    var _a;\r\n    if (!isObject(jwk)) {\r\n        throw new TypeError('JWK must be an object');\r\n    }\r\n    alg || (alg = jwk.alg);\r\n    if (typeof alg !== 'string' || !alg) {\r\n        throw new TypeError('\"alg\" argument is required when \"jwk.alg\" is not present');\r\n    }\r\n    switch (jwk.kty) {\r\n        case 'oct':\r\n            if (typeof jwk.k !== 'string' || !jwk.k) {\r\n                throw new TypeError('missing \"k\" (Key Value) Parameter value');\r\n            }\r\n            octAsKeyObject !== null && octAsKeyObject !== void 0 ? octAsKeyObject : (octAsKeyObject = jwk.ext !== true);\r\n            if (octAsKeyObject) {\r\n                return asKeyObject({ ...jwk, alg, ext: (_a = jwk.ext) !== null && _a !== void 0 ? _a : false });\r\n            }\r\n            return decodeBase64URL(jwk.k);\r\n        case 'RSA':\r\n            if (jwk.oth !== undefined) {\r\n                throw new JOSENotSupported('RSA JWK \"oth\" (Other Primes Info) Parameter value is not supported');\r\n            }\r\n        case 'EC':\r\n        case 'OKP':\r\n            return asKeyObject({ ...jwk, alg });\r\n        default:\r\n            throw new JOSENotSupported('Unsupported \"kty\" (Key Type) Parameter value');\r\n    }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}